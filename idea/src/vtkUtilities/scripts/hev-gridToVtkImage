#!/usr/bin/env python

import sys
import vtk
from optparse import OptionParser
import array

def showHelp():
    sys.stderr.write('\nUsage:\nhev-gridToVtkImage [options] --dim X Y Z inFName outFName\n')
    sys.exit(1)

use = "Usage: %prog [options] --dim X Y Z inFName outFName"

# PARSE COMMAND LINE
parser = OptionParser(usage = use)

# ASSIGN VALUES
parser.add_option("--ncomp", "--nc", dest="ncomp", type="int", default="1")
parser.add_option("--dim", "--d", dest="dim", nargs=3, type="int")
parser.add_option("--type", "--t", dest="type", type="string", default="float")
parser.add_option("--input", "--i", dest="input", type="string", default="text")
parser.add_option("--spacing", "--s", dest="spacing", nargs=3, type="float", default=(1,1,1))
parser.add_option("--origin", "--o", dest="origin", nargs=3, type="float", default=(0,0,0))
parser.add_option("--vector", "-v", dest="vector", action="store_true", default=False)

options, args = parser.parse_args()

#SET INPUT AND OUTPUT FILE
inputdatafile = args[0]
outputdatafile = args[1]

#SETUP GRID
grid = vtk.vtkImageData()
grid.SetSpacing(options.spacing)
grid.SetOrigin(options.origin)
if options.dim != None:
    grid.SetDimensions(options.dim)
else:
    print "--dim X Y Z is missing. This parameter is required to run this program."
    showHelp()

#SETUP ARRAY
if options.type == "float":
    arra = vtk.vtkFloatArray()
    kind = float
    fmt = 'f'
elif options.type.lower() == "double":
    arra = vtk.vtkDoubleArray()
    kind = float
    fmt = 'd'
elif options.type.lower() == "int":
    arra = vtk.vtkIntArray()
    kind = int
    fmt = 'i'
elif options.type.lower() == "uint":
    arra = vtk.vtkUnsignedIntArray()
    kind = int
    fmt = 'I'
elif options.type.lower() == "long":
    arra = vtk.vtkLongArray()
    kind = long
    fmt = 'l'
elif options.type.lower() == "ulong":
    arra = vtk.vtkUnsignedLongArray()
    kind = long
    fmt = 'L'
elif options.type.lower() == "short":
    arra = vtk.vtkShortArray()
    kind = int
    fmt = 'h'
elif options.type.lower() == "ushort":
    arra = vtk.vtkUnsignedShortArray()
    kind = int
    fmt = 'H'
elif options.type.lower() == "uchar":
    arra = vtk.vtkUnsignedCharArray()
    kind = int
    fmt = 'B'
elif options.type.lower() == "char":
    arra = vtk.vtkCharArray()
    kind = str
    fmt = 'b'
else:
    print ("--type TYPE. TYPE can either be float,double, int, uint, long, ulong, short, ushort, char or uchar")
    showHelp()

arra.SetNumberOfComponents(options.ncomp)

#Read Input File and Extract Data Points Into Array
if options.input.lower() == "text":
    inp = open(inputdatafile,'r')
    arr=[]
    for line in inp.readlines():
        values = map(kind,line.split())
        arr.append(values)

    data=[]
    for groups in arr:
        for datapoint in groups:
            data.append(datapoint)

    arra.SetNumberOfValues(len(data))

    for i in range(grid.GetNumberOfPoints()*options.ncomp):
        arra.SetValue(i,data[i])

elif options.input.lower() == "binary":
    inp = open(inputdatafile,'rb')
    data = array.array(fmt)
    
    data.fromfile(inp,grid.GetNumberOfPoints())
    
    arra.SetNumberOfValues(len(data))

    for i in range(grid.GetNumberOfPoints()*options.ncomp):
        arra.SetValue(i,data[i])
    
else:
    print "--input INPUT. INPUT can either be 'text' or 'binary'"
    showHelp()
    


#FILL GRID
if options.vector:
    grid.GetPointData().SetVectors(arra)
else:
    grid.GetPointData().SetScalars(arra)

#FILEWRITER
write = vtk.vtkGenericDataObjectWriter()
if options.input.lower() == "text":
    write.SetFileTypeToASCII()
else:
    write.SetFileTypeToBinary()
write.SetInput(grid)
write.SetFileName(outputdatafile)
write.Write()
write.Update()
