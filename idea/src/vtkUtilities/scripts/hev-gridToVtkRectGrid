#!/usr/bin/env python

import sys
import vtk
from optparse import OptionParser
import array

def showHelp():
    sys.stderr.write('\nUsage:\nhev-gridToVtkRectGrid [options] --dim X Y Z inFName inXCoordFName inYCoordFName inZCoordFName outFName\n')
    sys.exit(1)

# FUNCTION TO HANDLE THE THREE AXIS COORD FILES - RETURNS DATA ARRAY
def getAxisCoordinates(options, length, inputfile, arra, kind, fmt):
    if options.input.lower() == "text":
        inp = open(inputfile,'r')

        data=[]
        for line in inp.readlines():
            values = map(kind, line.split())
            data.append(values)

        for groups in data:
            for datapoint in groups:
                arra.InsertNextValue(datapoint)

        return arra

    elif options.input.lower() == "binary":
        inp = open(inputfile,'rb')

        data = array.array(fmt)
        data.fromfile(inp,length)

        arra.SetNumberOfValues(len(data))

        # FILL ARRAY
        for i in range(len(data)):
            arra.SetValue(i,data[i])
    
        return arra

use = "Usage: %prog [options] --dim X Y Z inFName inXCoordFName inYCoordFName inZCoordFName outFName"

# PARSE COMMAND LINE
parser = OptionParser(usage = use)

# ASSIGN VALUES
parser.add_option("--ncomp", "--nc", dest="ncomp", type="int", default="1")
parser.add_option("--dim", "--d", dest="dim", nargs=3, type="int")
parser.add_option("--type", "--t", dest="type", type="string", default="float")
parser.add_option("--input", "--i", dest="input", type="string", default="text")
parser.add_option("--vector", "-v", dest="vector", action="store_true", default=False)

options, args = parser.parse_args()

# SET INPUT AND OUTPUT FILE
if len(args) == 5:
    inputdatafile = args[0]
    inputXfile = args[1]
    inputYfile = args[2]
    inputZfile = args[3]
    outputdatafile = args[4]
else:
    print 'Incorrect number of arguments.'
    showHelp()

# SETUP GRID
grid = vtk.vtkRectilinearGrid()

if options.dim != None:
    grid.SetDimensions(options.dim)
else:
    print "--dim X Y Z is missing. This parameter is required to run this program."
    showHelp()

# SETUP ARRAY
if options.type == "float":
    arra = vtk.vtkFloatArray()
    Xarray = vtk.vtkFloatArray()
    Yarray = vtk.vtkFloatArray()
    Zarray = vtk.vtkFloatArray()
    kind = float
    fmt = 'f'
elif options.type.lower() == "double":
    arra = vtk.vtkDoubleArray()
    Xarray = vtk.vtkDoubleArray()
    Yarray = vtk.vtkDoubleArray()
    Zarray = vtk.vtkDoubleArray()
    kind = float
    fmt = 'd'
elif options.type.lower() == "int":
    arra = vtk.vtkIntArray()
    Xarray = vtk.vtkIntArray()
    Yarray = vtk.vtkIntArray()
    Zarray = vtk.vtkIntArray()
    kind = int
    fmt = 'i'
elif options.type.lower() == "uint":
    arra = vtk.vtkUnsignedIntArray()
    Xarray = vtk.vtkUnsignedIntArray()
    Yarray = vtk.vtkUnsignedIntArray()
    Zarray = vtk.vtkUnsignedIntArray()
    kind = int
    fmt = 'I'
elif options.type.lower() == "long":
    arra = vtk.vtkLongArray()
    Xarray = vtk.vtkLongArray()
    Yarray = vtk.vtkLongArray()
    Zarray = vtk.vtkLongArray()
    kind = long
    fmt = 'l'
elif options.type.lower() == "ulong":
    arra = vtk.vtkUnsignedLongArray()
    Xarray = vtk.vtkUnsignedLongArray()
    Yarray = vtk.vtkUnsignedLongArray()
    Zarray = vtk.vtkUnsignedLongArray()
    kind = long
    fmt = 'L'
elif options.type.lower() == "short":
    arra = vtk.vtkShortArray()
    Xarray = vtk.vtkShortArray()
    Yarray = vtk.vtkShortArray()
    Zarray = vtk.vtkShortArray()
    kind = int
    fmt = 'h'
elif options.type.lower() == "ushort":
    arra = vtk.vtkUnsignedShortArray()
    Xarray = vtk.vtkUnsignedShortArray()
    Yarray = vtk.vtkUnsignedShortArray()
    Zarray = vtk.vtkUnsignedShortArray()
    kind = int
    fmt = 'H'
elif options.type.lower() == "uchar":
    arra = vtk.vtkUnsignedCharArray()
    Xarray = vtk.vtkUnsignedCharArray()
    Yarray = vtk.vtkUnsignedCharArray()
    Zarray = vtk.vtkUnsignedCharArray()
    kind = int
    fmt = 'B'
elif options.type.lower() == "char":
    arra = vtk.vtkCharArray()
    Xarray = vtk.vtkCharArray()
    Yarray = vtk.vtkCharArray()
    Zarray = vtk.vtkCharArray()
    kind = str
    fmt = 'b'
else:
    print ("--type TYPE. TYPE can either be float,double, int, uint, long, ulong, short, ushort, char or uchar")
    showHelp()

arra.SetNumberOfComponents(options.ncomp)

# READ INPUT FILE, EXTRACT DATA POINTS INTO ARRAY AND FILL GRID SCALARS
# ASCII
if options.input.lower() == "text":
    inp = open(inputdatafile,'r')
    arr=[]
    for line in inp.readlines():
        values = map(kind,line.split())
        arr.append(values)

    data=[]
    for groups in arr:
        for datapoint in groups:
            data.append(datapoint)

    arra.SetNumberOfValues(len(data))

    for i in range(len(data)):
        arra.SetValue(i,data[i]) # FILL ARRAY
        
# BINARY
elif options.input.lower() == "binary":
    inp = open(inputdatafile,'rb')
    data = array.array(fmt)

    data.fromfile(inp,len(data))
    
    arra.SetNumberOfValues(len(data))

    for i in range(len(data)):
        arra.SetValue(i,data[i]) # FILL ARRAY
    
else:
    print "--input INPUT. INPUT can either be 'text' or 'binary'"
    showHelp()
    
# FILL GRID
if options.vector:
    grid.GetPointData().SetVectors(arra)
else:
    grid.GetPointData().SetScalars(arra)

# HANDLE X, Y AND Z COORDINATES AND FILL INTO GRID
grid.SetXCoordinates(getAxisCoordinates(options, options.dim[0], inputXfile, Xarray, kind, fmt))
grid.SetYCoordinates(getAxisCoordinates(options, options.dim[1], inputYfile, Yarray, kind, fmt))
grid.SetZCoordinates(getAxisCoordinates(options, options.dim[2], inputZfile, Zarray, kind, fmt))

# FILEWRITER
write = vtk.vtkRectilinearGridWriter()
if options.input.lower() == "text":
    write.SetFileTypeToASCII()
else:
    write.SetFileTypeToBinary()
write.SetInput(grid)
write.SetFileName(outputdatafile)
write.Write()
write.Update()
