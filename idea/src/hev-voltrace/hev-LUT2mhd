#!/usr/bin/perl
# convert a hev-createLUT-format dat file to a 1D mhd texture

use strict;

use File::Basename;
use Getopt::Long;

# clamp(val,min,max) clamps a value to the given range
sub clamp {
    my ($val, $min, $max) = @_;
    return $val<$min ? $min : $val>$max ? $max : $val;
}

# command info
my $prog = basename($0);	# program base name for usage


# options defaults
my $SCALE=1;			# volume scale factor

# mhd can store rgba, but display cannot view it
# ppm stores only rgb, useful for debugging
# pgm stores only a, useful for debugging
my $FORMAT="mhd";

sub usage {
    print STDERR <<EOF
Usage: $prog [--scale volumeScale] < file.lut > file.mhd

Create a 1D texture in mhd format given 1D look up table as
generated by hev-createLUT

Sample input:
  0   0 0 0 1
  1   .1 .1 .1 1
  2   .2 .2 .2 1
  [...]
  255 1 1 1 1

EOF
;
    exit(1);
}

usage() if (! GetOptions("scale=f"  =>\$SCALE,
			 "format=s" =>\$FORMAT));

usage() if ($#ARGV >= 0);

# texture table
my @tab;

# read LUT file into table
# each LUT entry represents one unit of solid material
while(<>) {
    s/\#.*//;			# remove comments

    # match line
    if (/(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/) {
	# apply volume scale factor
	my $alpha = $5>=1 ? $5 : 1-(1-$5)**$SCALE;

	# store in table with pre-multiplied alpha
	$tab[$1] = [$2, $3, $4, $alpha];
    }
}

# endianness: check native 's' order vs. little-endian (vax) 'v' order
my $bigendian = (pack("s",1) eq pack("v",1)) ? "False" : "True";

# image format header
my $size = $#tab+1;
if ($FORMAT eq "mhd") {
    print <<EOF
ObjectType = Image
NDims = 1
DimSize = $size
ElementNumberOfChannels = 4
BinaryDataByteOrderMSB = $bigendian
ElementType = MET_FLOAT
ElementDataFile = LOCAL
EOF
    ;
}
if ($FORMAT eq "ppm") {print "P6\n$size 1 255\n";}
if ($FORMAT eq "pgm") {print "P5\n$size 1 255\n";}

# write preintegration table image data
binmode(STDOUT);
foreach my $x (0..$#tab) {
    # output appropriate data as bytes
    my $packformat;
    my $scale;
    if ($FORMAT eq "mhd") {$scale=  1; $packformat="f4";}      # RGBA
    if ($FORMAT eq "ppm") {$scale=255; $packformat="c3";}      # RGB, ignore A
    if ($FORMAT eq "pgm") {$scale=255; $packformat="(cX)3 c";} # skip RGB do A
    print pack($packformat, map{$scale*$_} @{$tab[$x]});
}
close(STDOUT);
