#!/usr/bin/perl
# compute pre-integrated color table given hev-createLUT dat file

use strict;

use File::Basename;
use Getopt::Long;

# clamp(val,min,max) clamps a value to the given range
sub clamp {
    my ($val, $min, $max) = @_;
    return $val<$min ? $min : $val>$max ? $max : $val;
}

# command info
my $prog = basename($0);	# program base name for usage


# options defaults
my $SCALE=1;			# volume scale factor

# mhd can store rgba, but display cannot view it
# ppm stores only rgb, useful for debugging
# pgm stores only a, useful for debugging
my $FORMAT="mhd";


sub usage {
    print STDERR <<EOF
Usage: $prog [--scale volumeScale] < file.lut > file.mhd

Create 2D pre-integrated color table given 1D look up table as
generated by hev-createLUT

volumeScale is a floating point scaling factor to adjust for
differences in the scale assumed in the lookup table and the scale of
the volume.

Sample input:
  0   0 0 0 1
  1   .1 .1 .1 1
  2   .2 .2 .2 1
  [...]
  255 1 1 1 1

EOF
;
    exit(1);
}

usage() if (! GetOptions("scale=f"  =>\$SCALE,
			 "format=s" =>\$FORMAT));


usage() if ($#ARGV >= 0);


# function to merge two segments $f0 of the first and $f1 of the
# second ($f0+$f1 should sum to 1)
sub mergeSegments
{
    my ($v0,$v1,$f0,$f1) = @_;

    # scaling alpha / transparency:
    #   for a unit-length segment:
    #     1-a = t = exp(-k)
    #   for a segment of length f (assuming const within the segment):
    #     1-af = tf = exp(\int_{s=0}^{f}{k})
    #          = exp(-kf) = exp(-k)^f = t^f
    # so transparency, t, scales as t**f
    my $a0 = $$v0[3]; my $t0 = (1-$a0); my $tf0 = $t0**$f0;
    my $a1 = $$v1[3]; my $t1 = (1-$a1); my $tf1 = $t1**$f1;

    # transparency through both segments is product of individual segments
    my $aTotal = 1 - $tf0*$tf1;

    # scaling color
    #   for a segment of length f (assuming const within the segment):
    #     c_f = \int_{s=0}{f}{q t^s} = q*(t^f-1)/log(t)
    #   resulting in a scale factor of c_f/c_1 = (1-t^s)/(1-t) = af/a
    # limit as both segments approach transparent is 1
    my $cs0 = $aTotal<1e-9 ? 1 : (1-$tf0)/$aTotal;
    my $cs1 = $aTotal<1e-9 ? 1 : (1-$tf1)/$aTotal;

    # combine segments
    return [(map{$cs0*$$v0[$_] + $tf0*$cs1*$$v1[$_]}(0..2)), $aTotal];
}



# preintegration table
my @tab;

# read LUT file into diagonal of table
# each LUT entry represents one unit of solid material
while(<>) {
    s/\#.*//;			# remove comments

    # match line
    if (/(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)/) {

	# apply scale factor
	my $alpha = $5>=1 ? 1 : 1-(1-$5)**$SCALE;

	# store on diagonal of table
	$tab[$1][$1] = [$2, $3, $4, $alpha];
    }
}

# first step of integration
# integrates unit-length linear span between two values
# from i to i+1 and from i+1 to i
foreach my $i (0..$#tab-1) {
    $tab[$i][$i+1] = mergeSegments($tab[$i][$i],$tab[$i+1][$i+1],.5,.5);
    $tab[$i+1][$i] = mergeSegments($tab[$i+1][$i+1],$tab[$i][$i],.5,.5);
}

# remaining steps of integration
# combines and scales previous integrations to get a unit length span
# from i to i+j
foreach my $j (2..$#tab) {
    foreach my $i (0..$#tab-$j) {
	my (@v0,@v1, $f0,$f1, $t0,$t1, $s0,$s1);

	# combine segment from i to i+1 with segment from i+1 to i+j
	$tab[$i][$i+$j] =
	    mergeSegments($tab[$i][$i+1],$tab[$i+1][$i+$j],1/$j,1-1/$j);

	# combine segment from i+j to i+1 with segment from i+1 to i
	$tab[$i+$j][$i] =
	    mergeSegments($tab[$i+$j][$i+1],$tab[$i+1][$i],1-1/$j,1/$j);
    }
}

# endianness: check native 's' order vs. little-endian (vax) 'v' order
# really only necessary for short or float output
my $bigendian = (pack("s",1) eq pack("v",1)) ? "False" : "True";

# image format header
my $size = $#tab+1;
if ($FORMAT eq "mhd") {
    print <<EOF
ObjectType = Image
NDims = 2
DimSize = $size $size
ElementNumberOfChannels = 4
BinaryDataByteOrderMSB = $bigendian
ElementType = MET_FLOAT
ElementDataFile = LOCAL
EOF
    ;
}
if ($FORMAT eq "ppm") {print "P6\n$size $size 255\n";}
if ($FORMAT eq "pgm") {print "P5\n$size $size 255\n";}

# write preintegration table image data
binmode(STDOUT);
foreach my $y (0..$#tab) {
    foreach my $x (0..$#tab) {
	# output appropriate data as bytes
	my $packformat;
	my $scale;
	if ($FORMAT eq "mhd") {$scale=  1; $packformat="f4";}      # RGBA
	if ($FORMAT eq "ppm") {$scale=255; $packformat="c3";}      # RGB
	if ($FORMAT eq "pgm") {$scale=255; $packformat="(cX)3 c";} # A
	print pack($packformat, map{$scale*$_} @{$tab[$x][$y]});
    }
}
close(STDOUT);
