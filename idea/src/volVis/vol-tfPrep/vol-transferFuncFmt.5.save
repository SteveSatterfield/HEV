.\" This is a comment
.\" The extra parameters on .TH show up in the headers
.TH vol-transferFuncFmt 5 " " "NIST/ACMD/HPCVG" "HEV"
.SH NAME
vol-transferFuncFmt - Format of transfer function files used for direct volume rendering

.SH DESCRIPTION

Transfer function description files are used for direct volume
rendering of volume data sets.  
The functions specified by these files define the mapping from
volume data to color, opacity, and other rendering characteristics.

Transfer function files are processed by the program \fIvol-tfPrep\fR,
which produces the texture files and GLSL code required for 
use of the transfer function.  
The transfer function files described here can be thought of as
a specification of the transfer function, while the files generated by 
\fIvol-tfPrep\fR can be thought of as the implementation or
realization of that that transfer function.

Each transfer function file specifies a single transfer function.

By convention, transfer function file names are given the extesion \fI.tf\fR.


.SH GENERAL FORMAT

All transfer function files conform to a single general format:


.nf
    FUNC <transferFuncType> <funcName>
        .
        .
        .
    END_FUNC <funcName>
.fi

.TP
.B <transferFuncType>
One of the pre-defined transfer function types.  
Currently, this must be one of the following:
    RgbaLut1D
    GkBoundary
.br
The lines between \fIFUNC\fR and \fIEND_FUNC\fR are based on
the format required by \fI<transferFuncType>\fR.
These formats are described below.



.TP
.B <funcName>
This name identifies the function and is used in the generated GLSL source code.
Any string can be used as a function name, but the name used in the \fIFUNC\fR
and the corresponding \fIEND_FUNC\fR lines must be identical.

.TP
.B Comments
Comments can be added at any point in the file. 
Comments are indicated by the # character.
When this character is encountered, the remainder of the line is ignored.





.SH FORMAT for RgbaLut1D Transfer Function Files

The RgbaLut1D transfer function is a simple look-up table. 
The volume data set is assumed to have a single scalar value at each
voxel location.  This scalar value is used to look up color (RGB)
and opacity (Alpha) in a one-dimensional table.

The RGB and Alpha tables are specified separately, but may be combined
into a single table for actual use.  
See the keyword \fICOMBINE_RGBA\fR below.


.SS RGB Lookup Table Specification
The specification of the RGB lookup table takes this form:

.nf
    RGBLUT
        dataVal  r  g  b
        dataVal  r  g  b
        .
        .
        .
    END_RGBLUT
.fi

This specifies the mapping of a scalar data value from the volume
to a color (r, g, and b) for a series of data values.
Mapping any other data value to a color is done by interpolation;
see the keyword \fICOLOR_INTERP\fR below.
The color components (r, g, and b) should be floating point
numbers in the range [0.0, 1.0].

If the \fIRGBLUT\fR section is not present, the following default mapping
is used:
.nf
    RGBLUT
        0.0    1 0 0
        1.0    0 0 1
    END_RGBLUT
.fi
This default may change in the future.





.SS Alpha Lookup Table Specification
The specification of the Alpha lookup table takes this form:
.nf
    ALPHALUT
        dataVal    alpha
        dataVal    alpha
        .
        .
        .
    END_ALPHALUT
.fi

This specifies the mapping of a scalar data value from the volume
to an opacity (alpha) for a series of data values..
Mapping any other data value to opacity is done by linear interpolation.
The value of alpha should range from 
0.0 (fully transparent) to 1.0 (fully opaque).

If the \fIALPHALUT\fR section is not present, the following default mapping
is used:
.nf
    ALPHALUT
        0.0    0.05
        1.0    0.05
    END_ALPHALUT
.fi
This default may change in the future.



.SS Other RgbaLut1D Parameters

There are various other options that contribute to the specification
of the RGBALut1D transfer function. 
Each of these options is specified on a single line in a keyword-value format.

Here is a description of each keyword:

.TP
.B COLOR_INTERP   RGB | HSV | CIELAB | LAB | DIVERGING | NEAREST
This specifies how the color interpolation is done:
.RS
.TP
\fBRGB\fR  
linear interpolation of RGB components
.TP
\fBHSV\fR  
convert to HSV then linear interpolation of HSV components
.TP
\fBCIELAB\fR 
convert to CIELAB then linear interpolation of CIELAB components
.TF
\fBLAB\fR    
same as CIELAB
.TP
\fBDIVERGING\fR 
interpolation as described in "Diverging Color Maps for 
Scientific Visualization" by K. Moreland (http://www.sandia.gov/~kmorel/documents/ColorMaps).
.TP
.B NEAREST
nearest neighbor interpolation.
.RE

Default is \fIDIVERGING\fR.


.TP
.B LIGHTING EMIT_ONLY | GRAD_OPAQUE
The lighting model to be used.  

.RS
.TP
.B EMIT_ONLY 
A simple emission/absorption model in which
the volume emits color and absorbs light passing through on the 
way to the viewer.

.TP
.B GRAD_OPAQUE 
A lighing model in which the opaque material
(alpha >= 1.0) is rendering with light-source shading with a normal
vector derived from the gradient of the scalar field.
This gives an appearance similar to an isosurface.
.RE

The default is \fIEMIT_ONLY\fR.






.TP
.B NORMALIZE true | false
Specifies whether the GLSL code should normalize the volume
scalar data before doing the lookup.  Default is \fItrue\fR.

.TP
.B LOOKUP_INTERP LINEAR | NEAREST
Specifies how alpha interpolation should be done. Default is \fILINEAR\fR.

.TP
.B TABLE_TYPE UCHAR | FLOAT
This specifies the data type of the generated look up table files.
Default is \fIFLOAT\fR.

.TP
.B TABLE_LEN len
The length of the generated lookup table(s).
Default is \fI256\fR.

.TP
.B COMBINE_RGBA true | false
Specifies whether or not the color and opacity lookup tables should
be combined into a single table.  Default is \fItrue\fR.

.TP
.B VAL_TRANSFORM  LOG | LOG2 | LOG10 | EXP | EXP2 | EXP10 | NONE
Specifies that the transfer function assumes that the scalar data value
that is used for lookup into the color and opacity tables will have
been transformed as indicated.  This enables the user to specify the
RGBLUT and ALPHALUT using data values from an untransformed data space
while that table values are interpolated in the transformed data space.

Suppose, for example, that this is the color lookup table specification:
.nf
    RGBLUT
        1e-10   1 0 0   # full red
        1       0 1 0   # full green
        1e10    0 0 1   # full blue
    END_RGBLUT
.fi
Without any specification of VAL_TRANSFORM, the lookup table is 
constructed with the full red and full green entries right on top of
each other because the distance between the data values of the first
two is so much smaller than the distance between the second and third.

But if 
.nf
    VAL_TRANSFORM LOG10
.fi
is specified, then the full green entry is right in the middle of
the constructed lookup table.

The only effect of this parameter is in the way that the constructed
lookup table is interpolated.  It does not introduce any transformation
of the volume data into generated GLSL code.  It simply assumes that
the indicated transformation has already been done.


.SS EXAMPLES of RgbaLut1D Transfer Function Files

The simplest possible RgbaLut1D transfer function specification is:

.nF
    FUNC RgbaLut1D myFunc
    END_FUNC myFUnc
.fi

In this case, a default color/opacity lookup table is used.

Here is a more complicated specification:

.nf
    FUNC RgbaLut1D CO2D
        VAL_TRANSFORM LOG10
        COLOR_INTERP RGB
        LIGHTING GRAD_OPAQUE
        TABLE_TYPE UCHAR
        TABLE_LEN 256
        COMBINE_RGBA true
        RGBLUT
            1.2e-20        0.4     0.1     0.7
            3.9e-15        0.2     0.2     0.6
            6.8e-07        0.1     0.6     0.6
            5.9e-02        0.1     0.6     0.2
            1.0e+01        0.1     0.7     0.1
        END_RGBLUT
        ALPHALUT
            1.2e-20        0.0
            3.9e-15        0.4
            6.8e-07        0.9
            5.9e-02        1.0
            1.0e+01        1.0
        END_ALPHALUT
        END_FUNC CO2D
.fi

This specified a transfer function named CO2D with a lookup table of 256
entries in which the RGBA components are stored as unsigned char.
The tables are specified using volume data values ranging from 1.2e-20
to 10, but it is assumed that the table lookup will be done with values
that are log base 10 of the original volume data values; the 256 entries
of the lookup table will be interpolated based on that assumption.






.SH FORMAT for GkBoundary Transfer Function Files

The GkBoundary transfer functions are intended to make boundaries in
scalar volume data data sets visible, with relatively little interaction
with the user.

This algorithm creates a transfer function that is customized
for particular scalar volume data set.  The data set is read and processed
by the software, probable boundaries are characterized, and an opacity function
is generated to make these boundaries visible.  
If it is anticipated that multiple volume data files have similar 
characteristics, then it may be practical to generate a transfer function
based on one data set and then apply that function to other similar 
volume data sets.

The generated transfer function
may either be a function of the volume's scalar data value, or a function
of the scalar and its gradient magnitude. 
We describe these as 1D or 2D transfer functions.

The construction of these transfer functions is based on the methods described 
in:

.RS
"Semi-Automatic Generation of Transfer Function for Direct Volume Rendering",
G. Kindlmann and J. Durkin, 
Proc. IEEE Symp. Volume Visualization, pp. 79-86, 1998.
.br
(http://www.cs.utah.edu/~gk/papers/vv98)
.RE

and

.RS
“Semi-Automatic Generation of Transfer Functions for Direct Volume Rendering”, 
G. Kindlmann, 
Master's thesis, Cornell Univ., Ithaca, N.Y., Jan. 1999.
.br
(http://www.cs.utah.edu/~gk/MS)
.RE

The implementation of these methods is mainly accomplished through the
use of the \fIteem\fR software written by Gordon Kindlmann, described
and downloaded here:

.RS
http://teem.sourceforge.net
.RE

In particular, we have used the \fIbane\fR library and the program \fIgkms\fR 
from this package.  
Due to apparent version conflicts between the \fIgkms\fR and some other parts
of the \fIteem\fR software, we are using version 1.6 of the \fIteem\fR sofware.

The methods described in the papers above are concerned entirely with 
the generation of opacity functions; color is not considered. 
For this reason, we augment these methods with the specification of a
color (rgb) lookup table, much like that which is used in \fIRgbaLut1D\fR.


This algorithm makes use of the volume's scalar field (V), its 
gradient magnitude (G), and the second directional derivative 
along the gradient (H).  
These data items are explicitly used in
the parameters that control the construction of the transfer
function; in particular, a 3D histogram is constructed based
on these three dimensions.


Most of the parameters that specify a GkBoundary transfer function 
correspond to parameters of the \fIteem\fR software. 
The specifications of these parameters in our transfer function
file format typically follow the specifications that are used
by the \fIteem\fR software.  So our descriptions of these parameters
are derived from the \fIteem\fR
documentation and we will reference that documentation when appropriate.
A complete explanation of the algorithm and each parameter's role in
the algorithm is beyond the scope of this man page;
we direct you to the papers cited above.


Although there are many parameters, the defaults often work very well.


.SS Parameters that determine the opacity transfer function:

.TP
.B      INPUT_VOLUME  volumeFileName
The volume data file on which to base the constructed transfer function.
This file should be a \fI.mha\fR (MetaImage) file containing a 
single 3D scalar array.

This may be omitted, however if the transfer function is to be
processed by \fIvol-tfPrep\fR, this file must be specified 
either via the \fIINPUT_VOLUME\fR keyword or by \fIvol-tfPrep\fR's
command line option \fI--volume\fR; see the man page for \fIvol-tfPrep\fR.
This parameter may also be omitted in transfer function files specified
on the \fIvol-visBuilder\fR command line because that program provides
a volume data file when it invokes \fIvol-tfPrep\fR.

.TP
.B      HVOL_V_RANGE   vRange
Specification for the range of V to be covered by the 3D histogram volume.
There are four ways of specifying the range (from the \fIteem\fR documentation):

.RS
.TP
.B f:<F> 
included range is some fraction of the total range, as scaled by F
.TP
.B p:<P> 
exclude the extremal P percent of the values
.TP
.B s:<S> 
included range is S times the standard deviation of the values
.TP
.B a:<min>,<max>
range is from <min> to <max>
.RE

The default is \fIf:1.0\fR.


.TP
.B      HVOL_G_RANGE   gRange
Specification (as above) for the range of G to be covered by the 
3D histogram volume.
The default is \fIp:0.005\fR.



.TP
.B      HVOL_H_RANGE   hRange
Specification (as above) for the range of H to be covered by the 
3D histogram volume.
The default is \fIp:0.015\fR.

.TP
.B      HVOL_DIM   i j k
Dimensions of the histogram volume.  Default is \fI256 256 256\fR.

.TP
.B     HVOL_K0     kernel_0
Value (V) reconstruction kernel.  Default is "tent".  
The kernels that are available are described here:
.nf
    http://teem.sourceforge.net/nrrd/kernels.html#supplied
.fi

.TP
.B     HVOL_K1     kernel_1
First derivative (G) kernel. 
Default is "cubicd:1,0".

.TP
.B     HVOL_K2     kernel_2
Second derivative (H) kernel.
Default is "cubicdd:1,0".

.TP
.B      INFO_PROJECT_H  mean | median | mode | min | max
How to project the histogram volume along the H axis.
The default is \fImean\fR.

.TP
.B      INFO_DIM    1 | 2
The dimension of the target transfer function.  
If \fI1\fR is specified, the transfer function will be a function
of one variable: V.  
If \fI2\fR is specified, the transfer function will be a function
of two variables: V and G.  

.TP
.B      OPAC_BDRY_FUNC  s,w,c,a
A descrition of the boundary emphasis function.
For a full description of the meaning of this specification, please
consult the papers cited above. 

Here is a brief description from the \fIteem\fR documentation:
This parameter is a comma-separated list of four floats with 
no spaces "s,w,c,a", where:

    s = shape of function, between 0.0 for box and 1.0 for tent
    w = full-width half-max of function support
    c = where to center function support
    a = maximum opacity

The units for "w" and "c" are voxels. 
The default is \fI1,1,0,1\fR.




.TP
.B      OPAC_SIGMA   sigma
From the \fIteem\fR documentation: 
The scaling in position calculation; accounts for thickness of
transition region between materials. Lower sigmas lead to wider
peaks in opacity function. 

If it is not specified, it is calculated automatically.
Note that when \fIvol-tfPrep\fR processes the transfer function,
the actual sigma that was used is written to the header of
the generated \fI.mha\fR file.



.TP
.B      OPAC_GTHRESH  gthresh
From the \fIteem\fR documentation: 
The minimum significant gradient magnitude. Can be given in two
different ways:
.RS
.TP
.B <float>
specify gthresh as <float> exactly.

.TP
.B x<float>
gthresh is a scaling, by <float>, of the
maximum gradient magnitude in the info file.
.RE

The default is \fIx0.04\fR.


.\" .TP
.\" .B      OPAC_RADIUS  radius
.\" From the \fIteem\fR documentation: 
.\" The radius of median filtering to apply to opacity function.
.\" Use \fI0\fR to signify no media filtering. 
.\" Default is \fI0\fR.



.SS Parameters that determine the color transfer function:


The specification of the RGB lookup table is accomplished through
an RGBLUT section and the COLOR_INTERP keyword:


.nf
    RGBLUT
        dataVal  r  g  b
        dataVal  r  g  b
        .
        .
        .
    END_RGBLUT
.fi

This specifies the mapping of a scalar value 
to a color (r, g, and b) for a series of values.
Mapping any other value to a color is done by interpolation;
see the keyword \fICOLOR_INTERP\fR below.
The color components (r, g, and b) should be floating point
numbers in the range [0.0, 1.0].

Unlike in the RgbaLut1D transfer function, the scalar value (dataVal)
specified in the RGBLUT section is not intended to be the scalar
field (V) of the input volume data set.  
The data values specified here are used only for interpolation 
during the construction of the actual lookup table.
The range of actual (V) data values that are mapped into this 
table is determined by the GkBoundary algorithm; this range is
encoded into the GLSL and associated files produced by \fIvol-tfPrep\fR
and \fIvol-visBuilder\fR.

If the \fIRGBLUT\fR section is not present, the following default mapping
is used:
.nf
    RGBLUT
        0.0    1 0 0
        1.0    0 0 1
    END_RGBLUT
.fi
This default may change in the future.



.TP
.B COLOR_INTERP   RGB | HSV | CIELAB | LAB | DIVERGING | NEAREST
This specifies how the color interpolation is done:
.RS
.TP
\fBRGB\fR  
linear interpolation of RGB components
.TP
\fBHSV\fR  
convert to HSV then linear interpolation of HSV components
.TP
\fBCIELAB\fR 
convert to CIELAB then linear interpolation of CIELAB components
.TP
\fBLAB\fR    
same as CIELAB
.TP
\fBDIVERGING\fR 
interpolation as described in "Diverging Color Maps for 
Scientific Visualization" by K. Moreland (http://www.sandia.gov/~kmorel/documents/ColorMaps).
.TP
.B NEAREST
nearest neighbor interpolation.
.RE

Default is \fIDIVERGING\fR.




.SS Other parameters: 

.TP
.B LIGHTING EMIT_ONLY | GRAD_OPAQUE
The lighting model to be used.  

.RS
.TP
.B EMIT_ONLY
A simple emission/absorption model in which
the volume emits color and absorbs light passing through on the 
way to the viewer.

.TP
.B GRAD_OPAQUE
A lighing model in which the opaque material
(alpha >= 1.0) is rendering with light-source shading with a normal
vector derived from the gradient of the scalar field.
This gives an appearance similar to an isosurface.
.RE

The default is \fIEMIT_ONLY\fR.


.SS EXAMPLES of GkBoundary Transfer Function Files

The simplest GkBoundary transfer function file would look like this:
.nf
    FUNC GkBoundary gk1
    END_FUNC gk1
.fi
This, of course, uses all of the defaults and would require the
specification of a volume data set before the transfer function
could be fully constructed by \fIvol-tfPrep\fR.


Here is a slightly more complicated GkBoundary transfer function definition:
.nf
    FUNC GkBoundary gk2D
        INFO_DIM 2
        HVOL_DIM 64 64 64
        OPAC_SIGMA 0.9
        RGBLUT
            0.0  0.1 0.1 0.9
            0.4  0.5 0.8 0.5
            1.0  0.9 0.3 0.2
        END_RGBLUT
    END_FUNC gk2D
.fi
In this case, a 2D transfer function is constructed. The histogram
volume will have 64x64x64 entries; the value of sigma is set to 0.9;
and an RGB lookup table is specified.


.SH SEE ALSO
vol-tfPrep, vol-visBuilder


