.\" This is a comment
.\" The extra parameters on .TH show up in the headers
.\" This does left justification, but not right
.\" .ad l
.\" This turns off hyphenation?
.\" .nh
.\" This turns on hyphenation?
.\" .hy
.TH vol-visBuilder 1 " " "NIST/ACMD/HPCVG" "HEV"
.SH NAME
vol-visBuilder - Builds an IRIS volume visualization application based
on a set of 3D volume data sets.

.SH SYNOPSIS
.B vol-visBuilder 
[options]  volDataFn1...volDataFnN   transferFuncFN  outputBaseFN

.SH DESCRIPTION

\fBvol-visBuilder\fR builds a complete IRIS application for
the visualization of a set of 3D volume data sets.
It creates all of the files needed for displaying a 
volume rendering of the input volume data file(s) using
the specified transfer function.

The input volume data files can either be in "raw"
format or in .mha/.mhd (MetaImage) format.  
Any input volume data file that is in raw format will
be converted to .mha.
All output file names will be generated based on the 
specified \fIoutputBaseFN\fR.

It is possible for this program to generate a large number
of output files.  See \fIFILES PRODUCED\fR for a description
of the outputs.  




.TP
.B volDataFn1...volDataFnN
A list of input volume data files; each file should contain a 3D grid
of data points.  
If a file name ends in \fI.mha\fR or \fI.mhd\fR it is assumed to
be in MetaImage format, which is self-describing.  All other files
are assumed to contain "raw" data arrays.  Raw files are converted
to MetaImage based on \fI--volConvOptions\fR (see below).

.TP
.B transferFuncFN
File name of a transfer function description file in 
the format required by \fIvol-tfPrep\fR.
(This is not a GLSL source code file or a .mha/.mhd texture file.)

For more information on the format and content of the transfer
function description file, see the man page for \fIvol-transferFuncFmt\fR.

.TP
.B outputBaseFN
The base file name for the output file.
This string will be used to generate file names for various
output files.  See also the \fI--outDir\fR option below. and
the section \fIFILES PRODUCED\fR below.


.SH OPTIONS

Note: All option names that contain upper case can be specified using 
lower case. Unambiguous abbreviation of option names is allowed.

.SS "File options"

.TP
.B --outDir dirName
The name of the directory into which the output file(s) are to be placed.
All files generated by this program or required for running the
visualization are placed in this directory.
This directory must exist when the program is run; it will not be
created by vol-visBuilder.
Default is the current working directory.

.TP
.B --volConvOptions 'option-list'
A string specifying the conversion options to be used when processing
the input volume data files to create the volume texture files needed
for the volume rendering.  
If the input volume data files are already in .mha/.mhd format and
require no further processing, then this option string may be omitted.

If needed, this conversion to .mha/.mhd format 
is done by the program \fIhev-convertDataArray\fR.
The \fI--volConvOptions\fR string 
should contain the options to be passed to that program.
See the man page for \fIhev-convertDataArray\fR for the available options.

Please note that it is likely that this string will contain spaces, 
so it should be enclosed in single or double quotes so that it is 
properly handled.

.TP
.B --volWrite | --noVolWrite
Specifies whether the specified input volume data files should 
be processed.  
If \fI--noVolWrite\fR is specified then input volume files
are not converted or copied, however the file names that would have been
used for the converted output files are generated and used
in the other output files.
Default is \fI--volWrite\fR.


.TP
.B --cleanUp | --noCleanUp
Specifies whether or not to delete all of the generated files when 
an error is detected.  
Default is \fI--noCleanUp\fR.



.SS "Geometry options"

.TP
.B --box x y z
The size of the geometric box into which the volume data is spatially mapped.
The box is constructed with its center at the origin.
The default is \fI--box 1 1 1\fR.

.TP
.B --near | --noNear
Indicates whether to enable support for a near clipping plane.
The default is \fI--near\fR.

With \fI--noNear\fR, the volume will disappear where clipped by  the  near  
clipping  plane.  Use \fI--noNear\fR  if you know the volume will only ever be 
viewed from the outside.

.TP
.B --clip | --noClip
Indicates whether to enable support for user clipping planes.
The default is \fI--clip\fR.

With \fI--noClip\fR, the volume will disappear where clipped by  the  
user controlled clipping planes.
Use \fI--noClip\fR  if you know that user clipping will not be used.



.TP
.B --polygons | --noPolygons
The default is \fI--noPolygons\fR.
Indicates whether to enable support for solid polygonal objects 
embedded in the volume.

If \fI--polygons\fR is specified, the volume is attached to the 
post- branch of an .fxcam node and solid objects should be attached to the 
pre- branch of the same node. 
An example script that shows how to load solid object 
is generated with the name \fIoutputBaseFN.polyLoad.iris\fR.


.\" This is a comment
.\" .TP
.\" .B --slices N
.\" The number of additional internal slices to render.
.\" The default is 0.
.\" 
.\" This provides an alternate form of volume rendering 
.\" based on these internal rendered textured slices.
.\" With texture slicing, the volume
.\" is reconstructed through a large number of parallel slicing planes.
.\" Typically the number of slices is twice the number of voxels 
.\" in the longest dimension. 
.\" 
.\" Slices will be oriented parallel to the screen however you turn the volume. 
.\" The spacing will remain constant, so the maximum
.\" number of texture slices will only be visible when you look down the
.\" diagonal of the volume. As implemented here, the volume renderer will
.\" actually cast a ray between the slices, allowing coarser slice
.\" spacing. Adding slices allow an alternative to \fI--near\fR,
.\" \fI--clip\fR and \fI--objects\fR to support clipping and objects
.\" embedded in the volume. In general, those other methods will produce
.\" better quality and faster results than \fI--slices\fR.


.SS "Ray traversal options"


.TP
.B --rayStep s
The minimum  ray  step  (in  voxels)  to  take when casting the ray 
through the volume.
The default is 0.5.

Larger numbers will run faster by taking larger steps, but  may  skip  voxel
data.  If you really need a large step to make the volume rendering 
interactive, consider applying a blur to the volume with radius equal 
to  the  step size.

.TP
.B --randStep | --noRandstep
Indicates whether to take a randomly sized partial first step in the ray
casting.
The default is \fI--randStep\fR.
This reduces some visual artifacts caused by having all the rays marching
together.




.TP
.B --alphaScale scale
Scales the alpha (transparency) provided by the transfer function.
This value should be greater than zero.
The default is 1.

Increasing this will make the volume more opaque, 
decreasing it will make the volume more transparent.



.TP
.B --alphaOffset offset
Offsets the alpha (transparency) provided by the transfer function.
This value should be in the range (-1,1).
The default is 0.

Increasing this will make the volume more opaque, 
decreasing it will make the volume more transparent.


.TP
.B --densityScale density
Scales the visual density of the rendered volume.
This value should be greater than zero.
The default is 1.

Increasing this will make the volume more opaque, 
decreasing it will make the volume more transparent.

(In the previous version of vol-visBuilder, this was called --scaleOpacity.)


.TP
.B NOTE:
The three parameters alphaScale, alphaOffset, and densityScale are
used to manipulate the transparency of the rendered volume as
it is sampled during ray traversal.  At each ray sample, the
alpha that is used for the point integration is calculated by this formula:

 1 - (1 - ((tfAlpha+alphaOffset)*alphaScale)) ^ densityScale*stepLen

where tfAlpha is the alpha provided by the transfer function and stepLen
is the distance through the volume between this sample and the previous 
sample. 


.TP
.B --lighting gradOpaque | none
Specifies whether to apply light-source shading.
The keyword \fIgradOpaque\fR indicates that light
source shading should be applied when a ray 
hits an opaque sample and that the normal should
be calculated from the gradiant of the scalar field

The default is \fIgradOpaque\fR.
. 



.TP
.B --integration point | linear | <user-supplied>
Specifies the kind of integration to use for a step along a ray 
through the volume.
The default is \fIpoint\fR.

There are two pre-defined integration types:


.RS
.IP \(bu 4
.B point:
The volume rendering integral is approximated by simple
piecewise-constant Euler integration along the ray. Volume rendering
quality may not be as good as \fBlinear\fR (unless used with
a preintegrated transfer function), but this is the simplest and
fastest integration method.

.IP \(bu 4
.B linear:
Approximates the integration along each step of the ray by assuming that the
color and opacity changes linearly along the step. This is flexible (it allows
multidimensional transfer functions and volume lighting), and it is probably
about as fast as point integration.
.P
The actual integration step will be defined by the
integration() function in a GLSL source file with the name
vol.integration.\fItype\fR.glsl.  
This enables the user to provide a customized integration procedure.
The functions for the pre-defined integration methods are provided
in the files 
\fIvol.integration.point.glsl\fR and \fIvol.integration.linear.glsl\fR.


If you want to provide your own integration function, place the GLSL
code into a source file named \fIvol.integration.myName.glsl\fR
that contains a function named \fIintegration\fR.
This integration function must use the
following function name and prototype:
.IP
.B vec4 integration(vec3 position, float step, vec4 value, inout vec4 previous)
.P
The return value should be the color and opacity for integrating a
distance of \fIstep\fR along a ray to position \fIposition\fR, where
the value at \fIposition\fR is \fIvalue\fR, and the previous value was
\fIprevious\fR. The integration function should update \fIprevious\fR,
and also should call the \fItransfer\fR function as
necessary.  

The transfer function name can be specified as \fITRANSFER_FUNC_NAME\fR
which will be replaced with the actual transfer function name when
the full fragment shader program source code is assembled.
The transfer function can be assumed to have the following prototype:
.IP
.B vec4 TRANSFER_FUNC_NAME ()
.P
where the vec4 return value is color and opacity.

.RE




.SS "Other options"

.TP
.B --opacityGUI | --noOpacityGUI
Indicates whether the generated volume visualization application 
should provide a GUI for interactive manipulation of  
the opacity parameters alphaScale, alphaOffset, and densityScale.
The default is \fI--opacityGUI\fR.

.TP
.B --volTxtrFilter LINEAR | NEAREST
Specifies the filter method (i.e. interpolation method) 
to be used when accessing the
textures derived from the volume data.
\fILINEAR\fR is the usual method; it produces a continuous
interpolation of data across the volume.  
\fINEAREST\fR involves no interplation at all. The data
value at the closest grid point is used.  This results
in a discontinuous data field with constant values within
each voxel. The default is \fILINEAR\fR.

.TP
.B --include dirName
Add directories to be searched for the transfer function shader file
and other files #included by it. May be repeated to add additional
directories.
default is "."

.TP
.B --txtrUnitStart N
The first texture unit number to use.  
Texture unit numbers will be assigned sequentially starting with N.
Default is 0.




.SH FILES PRODUCED


All of the files produced by this program are placed in the
directory specified by \fI--outDir\fR or in the current
directory if \fI--outDir is not specified.  
All file names begin with \fIoutputBaseFN\fR to minimize
the likelihood of overwriting existing files.

.SS Texture Files:

.TP
.nh
.B <outputBaseFN>.<volDataFn1>.00000.mha <outputBaseFN>.<volDataFn2>.00001.mha ...
.hy
These are the texture files containing the volume data.  
Each input volume data file specified on the command line may need to 
be converted based on file type, location, and the option \fI--volConvOptions\fR.
These texture files are usually generated by \fIhev-convertDataArray\fR.


.TP
.nh
.B <outputBaseFN>.<transferFunctionName>0000.mha <outputBaseFN>.<transferFunctionName>0001.mha ...
.hy
These are any texture files needed for by the tranfer function.  
For transfer functions based on rgba lookup tables, there will typically be
only one of these files.  The \fItransferFunctionName\fR comes from the
transfer function description file specified on the command line.
These texture files are generated by \fIvol-tfPrep\fR.





.SS IRIS and Related Files:

.TP
.B <outputBaseFN>.startup.iris
This is the main IRIS file.  
It contains IRIS commands that encompass the entire volume visualization.


.TP
.B <outputBaseFN>.flipbook.iris
This IRIS file builds the scene graph that includes all of the 
volume data sets.
It sets up the scene graph structure as well as all required
uniforms, textures, and other state.
The flipbook structure required for multiple volumes is 
used even if there only a single volume.

.TP
.B <outputBaseFN>.flipbook.animator.iris
This IRIS file sets up the same scene graph structure as
\fI<outputBaseFN>.flipbook.iris\fR but does not actually
load the volume data.
This file is intended to be used (when necessary) as input to the
program \fIhev-animator\fR.
Because it does not load the volume data sets, it is loaded
by hev-animator much more quickly and requires less memory.


.TP
.B <outputBaseFN>.polyLoad.iris
This file is only generated when the \fI--polygons\fR is specified.
It contains example IRIS commands that show how to put
polygonal objects into the scene so that they are rendered
properly when embedded in the volume.

.TP
.B <outputBaseFN>.geom.savg
This file contains the geometry used by the volume rendering.

.TP
.B <outputBaseFN>.volWire.savg
This file contains a wireframe box that surrounds the volume.

.TP
.B <outputBaseFN>.addToMcp.mcp
This file contains commands used by \fIhev-masterControlPanel\fR (\fIMCP\fR).
These command add several relevant buttons to the main menu.



.SS Shader Code:
.br

.TP
.B <outputBaseFN>.frag
The GLSL code for the fragment shader program.

.TP

.TP
.B <outputBaseFN>.vert
The GLSL code for the vertex shader program.

.TP
.B <outputBaseFN>.<transferFunctionName>.glsl
The GLSL code for the transfer function.
This code has been included in the fragment shader.


.SS Executable Shell Scripts:

Many of these scripts contain example code to show how a particular
task may be accomplished.  

.TP
.B <outputBaseFN>.run.sh
This script runs the entire volume visualization using \fIirisfly\fR.

.TP
.B <outputBaseFN>.shaders.sh
This example script shows how to change the shader programs while the
volume visualization is running.

.TP
.B <outputBaseFN>.otherUniforms.sh
This example script shows how to change the values of various
uniform variables used by the shader programs while the
volume visualization is running.

.TP
.B <outputBaseFN>.transfer.sh
This example script shows how to change the texture(s) used by the 
transfer function while the volume visualization is running.

.TP
.B <outputBaseFN>.volumeTextures.sh
This example script shows how to change the texture(s) that contain
the volume data while the volume visualization is running.


.SS Other Files:

.TP
.B <outputBaseFN>.log
This file contains a log of the actions taken by this program.


.TP
.B <outputBaseFN>.fileList.txt
This file contains a list of the files produced by this program



.SH NOTES

\fIvol-visBuilder\fR is intended to create a fully functional volume rendering,
but it cannot account for all possible ways that you might want to 
use volume rendering.  
The files produced by this program can serve as
a starting point or a model for a volume visualization.
These files can be modified to make visualizations that go beyond
the scope of \fIvol-visBuilder\fR.


The fragment and vertex shader program source code files are assembled
using the C preprocessor.

This program is derived in large part from \fIhev-voltrace\fR.



.SH EXAMPLES

The following examples are based on data and transfer function files that
can be found in the directory $HEVROOT/idea/src/volVis/testData.
If you want to run these examples, you should copy that entire directory
and execute the example commands in that copy of the testData directory.


.TP
.nh
.B vol-visBuilder noBoundary.*.mha redGreen.tf nb
.hy
This command will prepare the volume data files that match 
\fInoBoundary.*.mha\fR
for rendering with the transfer function specified by \fIredGreen.tf\fR.
Because the input volume data sets are already in \fI.mha\fR format, 
they will be used as-is.

All output files will be placed in the current directory and all generated
file names will begin with \fInb\fR.  
The main IRIS file will be named nb.startup.iris and the script nb.run.sh
will run the volume visualization.


.TP
.nh
.B vol-visBuilder --outDir volVis --volConv="--nDim 3 --dim 115 100 29 --transform log10 --inType float64 --outType float32" --light gradOpaque concen_*.dat atmos.tf CO2
.hy
This command will prepare the volume data files that match 
\fIconcen_*.dat\fR
for rendering with the transfer function specified by \fIatmos.tf\fR.
The volume data files are processed by \fIhev-convertDataArray\fR based on the
options specified by \fI--volConv\fR.

The output will be placed in the subdirectory \fIvolVis\fR 
(which must already exist) and all generated
file names will begin with \fICO2\fR.  
The main IRIS file will be named CO2.startup.iris and the script CO2.run.sh
will run the volume visualization.

.TP
.nh
.B vol-visBuilder  boundary.*.mha bdry.gk1D.tf bdry1D
.hy
This example is very similar to the first example, but is included
becauses it shows the use of a GkBoundary transfer function.
(See the man page for vol-transferFuncFmt.)

This command prepares the volume data files that match 
\fIboundary.*.mha\fR
for rendering with the transfer function specified by \fIbdry.gk1D.tf\fR.
Because the input volume data sets are already in \fI.mha\fR format, 
they will be used as-is.

All output files will be placed in the current directory and all generated
file names will begin with \fIbdry1D\fR.  
The main IRIS file will be named bdry1D.startup.iris and the script 
bdry1D.run.sh will run the volume visualization.

When running the completed visualization, you may want to change
the opacity; click on "opacity" on the main menu and adjust the
opacity parameters.


.SH SEE ALSO
vol-tfPrep, hev-convertDataArray, hev-voltrace, vol-transferFuncFmt


