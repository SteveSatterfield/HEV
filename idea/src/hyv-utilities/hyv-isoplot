#! /usr/bin/perl
#
# hyv-isoplot - see usage message below
#
# steve@nist.gov
#

$version="20081110";


use Getopt::Long;
use File::Basename;  #http://perldoc.perl.org/File/Basename.html


#####################
#  Usage subroutine #
#####################


sub usage {

print STDERR <<EOF

Usage: hyv-isoplot [--nodisplay] [config.prgb]  dataDir

  Generate and display the Isovalues Plot.

  --nodisplay   generate but don\'t display the plot. Normally, the plot is
                displayed when it is generated.

  config.prgb   is a config file of the phases to be plotted and the RGB
                color of the plotted curves. See below for the format.
                If not specifed, then is is assumed a plot has been
		previously generated and is in the specified dataDir
		with the name \"isovalues.png\" which is simply 
		displayed.


  dataDir       is an existing directory that contains the appropriate
                *.iso files exist to match what is requested in config.prgb.
		The *.iso files are created by previously executing
		hyv-phase2iso.


  config.prgb format:
    
     This file is typically in the current directory, not dataDir.
     It contains lines of the form: phase  red  green blue name
     where the color are floats in the range 0.0 to 1.0.
     Only the specified phases will be plotted.
     For example:

                    1 1.0   0.498 0.941  C3S
		    2 1.0   0.757 0.498  Ca(OH)2
		    3 0.867 1.0   0.498  CSH
		    4 0.498 0.741 1.0    CSH(m)


EOF
;
exit(1)
}

# End of Usage subroutine




############################
# Process the command line #
############################

$debugFlag=0;
$helpFlag=0;
$nodisplay=0;

GetOptions("debug"       => \$debugFlag,
           "nodisplay"   => \$nodisplay,
           "help"        => \$helpFlag);

usage() if ($helpflag);

if (@ARGV == 1) {
    # Simple case, just display the existing file
    $data = shift;
    $cmd="hev-imageDisplay -title Isovalues ".$data."/isovalues.png";
    if ($debugFlag) {
	print STDERR "\n$cmd\n";
    }
    system($cmd);
    exit(0);
} elsif (@ARGV == 2) {
    $configFile = shift;
    $data= shift;
} else {
    usage();
}

if ($debugFlag) {
    print STDERR "\n";
    print STDERR "debugFlag= $debugFlag\n";
    print STDERR "nodisplay= $nodisplay\n";
    print STDERR "configFile= $configFile\n";
    print STDERR "data= $data\n";
}


#
# Read the config file
#

open (CONFIG,"<$configFile") || die("Can not open $configFile\n");

if ($debugFlag) {
    print STDERR "Reading $configFile\n";
}
$i=0;
while (<CONFIG>) {
    if (/(\s*)\#/) {
	#chop; print STDERR "Found comment line: >$_<\n";
	next
    }
    if (/(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)
            /x)
        {
	    if ($debugFlag) {
		printf STDERR "%d %g %g %g n= %s\n",$1,$2,$3,$4,$5;
	    }
	    $phase[$i]=$1;
	    $r[$i]=$2;
	    $g[$i]=$3;
	    $b[$i]=$4;
	    $pname[$i]=$5;
	    $i++;
	}
    else {
	chop;
	die "Bad data in $configFile at line -->$_<--\n";
    }
}

#length of config file
$l=@phase;
if ($debugFlag) {
    print "length of data in $configFlag: $l\n";
}

#
# Go to the sub-directory to do the work
#
chdir($data) || die("Can not chdir to: $data\n");

#
# Accumulate the iso values data into one file for each phase
#
for ($i=0; $i<$l; $i++) {

    $cmd="cat \*_".$phase[$i].".iso > phase".$phase[$i]."_iso.Rdat";
    if ($debugFlag) {
	print STDERR "cmd= $cmd\n";
    }
    system($cmd);

}


#
# Build the R graphics program and execute it
#

$isoRname="isovalues.R";
$isoPngName="isovalues.png";
$pngWidth=448;
$pngHeight=448;

buildRscript();


if ($debugFlag) {
    print STDERR "hyv-isoplot all done\n";
}
exit(0);




sub buildRscript {

open (ISO,">$isoRname") || die("Can not open R output file: $isoRname<\n");

print ISO "# $isoRname - create a Isovalues Plot using R graphics\n";
print ISO "#\n";
$date=localtime;
print ISO "# This R script was created by hyv-isoplot: $date\n";
print ISO "#\n";
print ISO "# Execute with the following command to create $isoPngName\n";
print ISO "# R --no-save < isovaluesR\n";
print ISO "\n";
print ISO "png(\"$isoPngName\",width=$pngWidth,height=$pngHeight)\n";
print ISO "\n";

for ($i=0; $i<$l; $i++) {
    $p=$phase[$i];
    printf ISO "ph%d=read.table(\"phase%d_iso.Rdat\")\n",$p,$p;
    printf ISO "p%d=ph%d\$V1\n",$p,$p;
    printf ISO "p%dcol=rgb(%g,%g,%g)\n",$p,$r[$i],$g[$i],$b[$i];
    print ISO "\n";
}


# Originally for the xlim, I was setting
# x<-0:100
# and then using xlim-range(x) in the plot command.
# Now I am letting plot default the xlim which seems to work fairly well.

print ISO "# Create the plot\n";
print ISO "plot.new()\n";
print ISO "par(lwd=3,bg=\"#ddddff\",font.axis=2,font.lab=2)\n";
# Assume at least one phase curve exists
$p=$phase[0];
printf ISO "plot(p%d,type=\"l\",ylim=c(0,1),ann=FALSE,axes=TRUE,col=p%dcol)\n",$p,$p;
print ISO "# p1 is repeated later  so that is over prints the legend\n";
print ISO "\n";

print ISO "# Add the legend\n";
print ISO "par(lwd=1)\n";

$labelString="\"".$pname[0]."\"";
for ($i=1; $i<$l; $i++) {
    $labelString=$labelString.","."\"".$pname[$i]."\"";
}
$colorString="p".$phase[0]."col";
for ($i=1; $i<$l; $i++) {
    $colorString=$colorString.",p".$phase[$i]."col";
}

# be a little bit clever for the legend position
print ISO "xp<-par(\"usr\")[2]*.1      # par function supplies the max user x value\n";
print ISO "legend(x=xp,y=1,c(".$labelString."),fill=c(".$colorString."),bg=\"white\",box.lwd=1)\n";
print ISO "par(lwd=3)\n";
print ISO "par(new=TRUE)\n";
print ISO "\n";


print ISO "# Add the title\n";
print ISO "title(main=\"Isovalues\",xlab=\"Time Step\",ylab=\"Fraction\")\n";
print ISO "par(new=TRUE)\n";
print ISO "par(lwd=3)\n";
print ISO "\n";

# Now do the curves
print ISO "# Plot the data\n";
for ($i=0; $i<$l; $i++) {
    $p=$phase[$i];
    printf ISO "plot(p%d,type=\"l\",ylim=c(0,1),ann=FALSE,axes=FALSE,col=p%dcol)\n",$p,$p;
    print ISO "par(new=TRUE)\n";
    print ISO "\n";
}

print ISO "graphics.off()\n";
print ISO "quit()\n";

close ISO;

# Now execte R to generate the plot into a png file
$cmd= "R --no-save < isovalues.R > isovalues.log";
system($cmd);

# and display
if ($nodisplay==0) {
    system("hev-imageDisplay -title Isovalues isovalues.png");
}
exit(0);

}
