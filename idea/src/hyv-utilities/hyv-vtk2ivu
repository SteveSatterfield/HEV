#! /usr/bin/perl
#
# hyv-vtk2ivu - see usage message below
#
# steve@nist.gov
#

$version="20081113";


use Getopt::Long;
use File::Basename;  #http://perldoc.perl.org/File/Basename.html


#####################
#  Usage subroutine #
#####################


sub usage {

print STDERR <<EOF

Usage: hyv-vtk2ivu [--parallel n] [--ivmaterial string] phaseNumber [r g b]  dataDir | vtkFile

  Convert the *.vtk files for a specified phaseNumber to *.ivu,
  i.e isosurface. The iso value is specified by the corresponding *.iso file.


  --parallel n  specifies how many concurrent processes to be used convert
                in parallel. On a 2 CPU machine, n of 2 is a good number.

  phaseNumber   is an integer used to identify the phase being processed.
                This command is invoked multiple times for each desired 
		phase.

  r g b         is the color (optional) to be applied to the resulting
                isosurface. These values are specified in the range 0.0 to 1.0
                These values are used for difuse color, but are ignored if
                --ivmaterial is specified.

  dataDir       is an existing directory containing the phase files.
                The resulting iso files are written to dataDir
		with names in the form of *.iso.

  vtkFile       when a vtk file is specified rather than a directory name,
                then the single specified is vtk file is converted to an ivu
                isosurface file in the current directory.

  --ivmaterial string
                when specified, this string is passed to the ivmaterial command
		used internally to add material values to the create ivu. This
		string over rides the r g b parameters, so be sure to include
                the desired diffuse r g b color as part of the string.
                Refer to \fIivmaterial\fR man page.


Version: $version

EOF
;
exit(1)
}

# End of Usage subroutine




############################
# Process the command line #
############################

$debugFlag=0;
$parallel=1;
$ivmat="";

$err=GetOptions("debug"         => \$debugFlag,
	   "ivmaterial=s{1}"  => \$ivmat,
           "parallel:i"    => \$parallel);

#$n=@ARGV;
#print STDERR "err= $err n= $n  ivmat= $ivmat\n";

if ($err == 0) {usage();}



if (@ARGV == 5) {
    $phaseNumber = shift;
    $rVal = shift;
    $gVal = shift;
    $bVal = shift;
    $data = shift;
} elsif (@ARGV == 2) {
    $phaseNumber = shift;
    $rVal = .8;
    $gVal = .8;
    $bVal = .8;
    $data = shift;
} else {
    usage();
}


if ($debugFlag) {
    print STDERR "\n";
    print STDERR "debugFlag= $debugFlag\n";
    print STDERR "parallel= $parallel\n";
    print STDERR "phaseNumber= $phaseNumber\n";
    print STDERR "rVal= $rVal\n";
    print STDERR "gVal= $gVal\n";
    print STDERR "bVal= $bVal\n";
    print STDERR "data= $data\n";
    print STDERR "ivmat= $ivmat\n";
    
}



# Is the input data a single file or directory of file?
if ( -d $data ) {
    #print STDERR "$data is a directory\n";
    processDirFiles();
    #print STDERR "All Done\n";
} else {
    #print STDERR "$data is a file\n";
    processSingleFile()

}


#########################
# Process a single file #
#########################

sub processSingleFile {
    print STDERR "Process a single vtk file: $data\n";
	
    ($basename, $dirname, $suffix) = fileparse($data, ('.vtk'));

    $a=rindex($basename,"_");
    if ($a<0) {
	print STDERR "Phase number must be part of the file name: $basename\n";
	usage();
    }
    #$phaseNumber=substr($basename,$a+1);
    if ($debugFlag) {
	print STDERR "phaseNumber $phaseNumber\n";
    }

    $ivName=$basename.".iv";
    $ivuName=$basename.".ivu";
    $isoName=$basename.".iso";
    if ($debugFlag) {
	print STDERR "data= $data\n";
	print STDERR "basename= $basename\n";
	print STDERR "path= $path\n";
	printf(STDERR "suffix= '%s'\n",$suffix);
	print STDERR "ivName= $ivName\n";
	print STDERR "ivuName= $ivuName\n";
	print STDERR "isoName= $isoName\n";
    }
    if ($suffix eq '') {die("'$data' is not a vtk file or directory\n");}

#    open(VTK,"<$data") || die("Can not open file: $data\n");

    #
    # Two step process: step 1 - create an isoSurface as *.iv
    #

    # Get the iso value
    $isoValue=getIsoValue($isoName);

    $isoCmd ="hev-tclVtkIsosurfaceDecimate $isoValue $data $ivName .6";
    if ($debugFlag) {
	print STDERR "isoCmd= $isoCmd\n";
    }
    system($isoCmd);
    $rc=$?;
    if ($rc != 0) {
	print STDERR "Warning: hev-tclVtkIsosurfaceDecimate failed\n";
    }


    # Ensure that a a valid iv is produced. When the no file is produced,
    # create a valid empty file.

    #print STDERR "Temporarily delete for testing: $ivName\n";
    #unlink($ivName);


    if ( ! -s $ivName) {
	if ($debugFlag) {
	    print STDERR "Creating valid empty file: $ivName\n";
	}

	open(IV,">$ivName") || die("Can not open file: $ivName\n");
	print IV "#Inventor V2.0 ascii\n";
	print IV "#Empty Inventor file\n";
	close(IV);
    }

	


    #
    # step 2:
    #
    #        Clean up some cruft and all Material properties generated by VTK
    #        then add my own material properties and rename to .ivu
    #
    #        Probably should make the command line parameters someday
    #

    $am="0.2 0.2 0.2";
    $di="$rVal $gVal $bVal";
    $sp=".8 .8 .8";
    $em="0 0 0";
    $sh="1.0";
    $tr="0";

    # This could probably be made more efficient with some clever perl

    $ivuCmd=" sed '3,20d' < $ivName | sed '/Transform/,+11d'| sed '\$d' | ivmaterial ";
    if ($ivmat eq "" ) {
	$ivuCmd=$ivuCmd."-am $am -di $di -sp $sp -em $em -sh $sh -tr $tr";
    } else {
	$ivuCmd=$ivuCmd.$ivmat;
    }
    $ivuCmd=$ivuCmd."  > $ivuName";
 
    if ($debugFlag) {
	print STDERR "ivuCmd= $ivuCmd\n";
    }
    system($ivuCmd);


	
}


# Subroutine to read the corresponding iso file for the iso value

sub getIsoValue {
    # Make these local
    local($isoNameTemp,$isoValueTemp);
    #Get the passed parameter
    $isoNameTemp=$_[0];
    open(ISO,"<$isoNameTemp") || die("Can not open file: $isoNameTemp\n");

    $isoValueTemp=<ISO>;
    # is it a valid number
    if ( ! ($isoValueTemp =~ /^([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?\d+))?$/ ) ) {
	die("$isoNameTemp contains bad data\n");
    }

    chop($isoValueTemp);
    return($isoValueTemp);
}




####################################
# Process a directory of vtk files #
####################################

sub processDirFiles {
    print STDERR "Process a directory of vtk files: $data\n";

    chdir($data) || die("Can not chdir to: $data\n");

    ($debugFlag) ? ($debugOption="--debug") : ($debugOption="");
    ($ivmat eq "") ? ($ivmatOption="") : ($ivmatOption="--ivmaterial \"$ivmat\"");

    $pcount=$parallel;
    
    $fileList="*_".$phaseNumber.".vtk";
    #print STDERR "fileList= $fileList\n";
    while ($vtkFile = < $fileList > ) {

	$cmd="hyv-vtk2ivu $debugOption $ivmatOption $phaseNumber $rVal $gVal $bVal $vtkFile";
	if ($debugFlag) {
	    print STDERR "cmd= $cmd\n";
	}
	if ($pid = fork) {
	    # parent here
	    #print STDERR "Parent\n";
	    $pcount--;
	    if ($pcount == 0) {
		while (wait != -1) {
		    #print STDERR "waiting\n";
		}
		$pcount=$parallel;
	    }
	} else {
	    # child here
	    #print STDERR "Child: $cmd\n";
	    exec($cmd);
	    exit 0;
	}


    }

    while (wait != -1) {
	#print STDERR "waiting\n";
    }
}

