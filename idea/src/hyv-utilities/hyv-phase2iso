#! /usr/bin/perl
#
# hyv-phase2iso - see usage message below
#
# steve@nist.gov
#

#$version="20080923";
$version="20110616";


use Getopt::Long;
use File::Basename;  #http://perldoc.perl.org/File/Basename.html


#####################
#  Usage subroutine #
#####################


sub usage {

print STDERR <<EOF

Usage: hyv-phase2iso [--parallel n] [--iso value] [--percent value] [phaseNumber] dataDir | phaseFile

  Convert all *.phase files found in the data directory into an iso file
  needed to generate the isosurface. An iso file is a isovalue. There is
  an iso file for each vtk file.

  --parallel n  specifies how many concurrent processes to be used convert
                in parallel. On a 2 CPU machine, n of 2 is a good number.

  --iso value   specifies a constant iso value to be used. See notes below
                regarding the iso value.  

  --percent value specifies an alternate method for computing the isovalue.
                  The isovlaue is a percent, expressed as float value 0 to 1,
                  of the maximum data value.

  phaseNumber   is an integer used to identify the phase being processed.
                If not specified, then all phases are procesed.  


  dataDir       is an existing directory containing the phase files.
                The resulting iso files are written to dataDir
		with names in the form of *.iso.

  phaseFile     if a phase file is specified rather than a directory name,
                then the single specified phase file is converted to
                a iso file in the current directory.


  Iso Value: 

        If the optional --iso flag is specified, then the specified constant
        iso value is used for all the generated iso values.

	However, the default iso value is an average excluding 0 values that
	varies for each phase file:

           Sum the phase values, but exclude values near 0 ( less than 1e-8)
           and any phase value greater than 1 is set to 1.

           Divide by the number of summed values.


         Additionally, you are free skip this command and manually create your
         own *.iso files



EOF
;
exit(1)
}

# End of Usage subroutine




############################
# Process the command line #
############################

$debugFlag=0;
$parallel=1;
undef($isoValue);
$isoFlag=0;
undef($percent);
$percentFlag=0;

GetOptions("debug"       => \$debugFlag,
           "iso:f"       => \$isoValue,
           "percent:f"   => \$percent,
           "parallel:i"  => \$parallel);

#usage() if (@ARGV < 1);

if (@ARGV == 1) {
    $phaseNumber=0;
    $phaseList="*.phase";
    $data= shift;
} elsif (@ARGV == 2) {
    $phaseNumber= shift;
    $phaseList="*_".$phaseNumber.".phase";
    $data= shift;
} else {
    usage();
}


if (defined($isoValue)) {
    $isoFlag=1;
}
if (defined($percent)) {
    $percentFlag=1;
}


if ($debugFlag) {
    print STDERR "\n";
    print STDERR "debugFlag= $debugFlag\n";
    print STDERR "parallel= $parallel\n";
    if ($isoFlag) {print STDERR "isoValue= $isoValue $isoFlag\n";}
    if ($percentFlag) {print STDERR "percent= $percent $isoFlag\n";}
    print STDERR "phaseNumber = $phaseNumber\n";
    print STDERR "phaseList = $phaseList\n";
    print STDERR "data= $data\n";
}


if (( $isoFlag==1) && ( $percentFlag==1)) {
    die ("Can not specify both --iso and --percent flags at the same time\n");
}



# Is the input data a single file or directory of file?
if ( -d $data ) {
    #print STDERR "$data is a directory\n";
    processDirFiles();
    #print STDERR "All Done\n";
} else {
    #print STDERR "$data is a file\n";
    processSingleFile()

}


#########################
# Process a single file #
#########################

sub processSingleFile {
    print STDERR "Process a single phase file: $data\n";
	
    ($basename, $dirname, $suffix) = fileparse($data, ('.phase'));

    $a=rindex($basename,"_");
    if ($a<0) {
	print STDERR "Phase number must be part of the file name: $basename\n";
	usage();
    }
    $phaseNumber=substr($basename,$a+1);
    if ($debugFlag) {
	print STDERR "phaseNumber $phaseNumber\n";
    }

    $isoName=$basename.".iso";
    if ($debugFlag) {
	print STDERR "data= $data\n";
	print STDERR "basename= $basename\n";
	print STDERR "path= $path\n";
	printf(STDERR "suffix= '%s'\n",$suffix);
	print STDERR "isoName= $isoName\n";
    }
    if ($suffix eq '') {die("'$data' is not a phase file or directory\n");}

    open(ISO,">$isoName") || die("Can not open file: $isoName\n");

    if ($isoFlag) {
	$iso=$isoValue;
    } elsif ($percentFlag) {
	open(PHASE,"<$data") || die("Can not open file: $data\n");
	$maxValue=0;
	while (<PHASE>) {
	    @c=split(' ', $_, -1);
	    $a=$c[0];
	    if ($a > 1) {$a = 1;}
	    if ($a > $maxValue) {
		$maxValue=$a;
	    }
	}

	$iso = $maxValue*$percent;

	# if iso is 0, then no data so ensure no isosurface generated
	# by setting iso to 1
	if ($iso == 0) {$iso=1;}


	close(PHASE);
	
    } else {
	open(PHASE,"<$data") || die("Can not open file: $data\n");
	$sum=0;
	while (<PHASE>) {
	    @c=split(' ', $_, -1);
	    $a=$c[0];
	    if ($a > 1) {$a = 1;}
	    if ($a > 1e-8) {
		$n++;
		$sum=$sum+$a;
	    }
	}

	if ($n == 0) {
	    if ($debugFlag) {
		print STDERR "Iso value set to 0 to prevent divide by 0\n";
	    }
	    $iso=0;
	} else {
	    $iso=$sum/$n;
	}
	close(PHASE);
    }

    #print STDERR "sum= $sum n= $n iso= $iso\n";
    print ISO "$iso\n";
    close(ISO);

}


######################################
# Process a directory of Phase files #
######################################

sub processDirFiles {
    print STDERR "Process a directory of Phase files: $data\n";

    chdir($data) || die("Can not chdir to: $data\n");

    ($debugFlag) ? ($debugOption="--debug") : ($debugOption="");

    ($isoFlag) ? ($isoOption="--iso $isoValue") : ($isoOption="");

    ($percentFlag) ? ($percentOption="--percent $percent") : ($percentOption="");

    $pcount=$parallel;
#    while ($phaseFile = < *.phase > ) {
    while ($phaseFile = < $phaseList > ) {

	$cmd="hyv-phase2iso $debugOption $isoOption $percentOption $phaseFile";
	if ($pid = fork) {
	    # parent here
	    #print STDERR "Parent\n";
	    $pcount--;
	    if ($pcount == 0) {
		while (wait != -1) {
		    #print STDERR "waiting\n";
		}
		$pcount=$parallel;
	    }
	} else {
	    # child here
	    #print STDERR "Child: $cmd\n";
	    exec($cmd);
	    exit 0;
	}


    }

    while (wait != -1) {
	#print STDERR "waiting\n";
    }
}

