#include <iris.h>

// this file is generated by the makefile from the fluid file
#include "showCursorPositionInImageGUI.cxx"

////////////////////////////////////////////////////////////////////////
int main(int argc, char **argv)
{
    
    // send dtkMsg files to stderr
    // to get INFO level messages set the envvar DTK_SPEW=info
    dtkMsg.setFile(stderr) ;

    // set the signls that kill us off
    iris::Signal(cleanup) ;
    
    ////////////////
    // this stuff is for command parsing- it pulls out the fltk arguments
    // and leaves the rest for our program
    if(dtkFLTKOptions_get(argc, (const char **) argv,
			    &fltk_argc,  &fltk_argv,
			    &other_argc, &other_argv)) 
    {
	usage() ;
	return 1 ;
    }
    
    // parse the local arguments and do other setup
    if(! init(other_argc, other_argv))
    {
	usage() ;
	return 1 ;
    }
    
    ////////////////
    // create the main window
    main_window = make_main_window() ;
    main_window->end();
    main_window->show(fltk_argc, fltk_argv);

    // disable killing the window using the close button or escape button
    main_window->callback(doNothingCB);

    // create the sub-window but don't show it- the image() function will do that
    sub_window = make_sub_window() ;
    // give the image window the name of the image file
    sub_window->label(image_name) ;
    // set its size based on the size of the image
    sub_window->size(w,h) ;
    // disable killing the sub-window using the close button or escape button
    sub_window->callback(doNothingCB);
    sub_window->end();

    // size the box in the sub-window and load the image
    image_box->position(0,0) ;
    image_box->size(w,h) ;
    image_box->image(flImage) ;

    // stores the state of the buttons the previous loop
    static int last_state = 0 ;

    // the GUI loop
    while (Fl::wait() && running)
    {
	// is mouse in the image?
	if (Fl::belowmouse() == image_box)
	{
	    // is a button pressed?
	    int state = Fl::event_buttons() ;
	    if (state != 0)
	    {
		// did the button state change since the last event?
		if (last_state != state)
		{
		    last_state = state ;
		    int b = Fl::event_button() ;
		    std::string bn ;
		    if (b == 1) bn = "left" ;
		    else if (b == 2) bn = "center" ;
		    else if (b == 3) bn = "right" ;
		    else bn = "other" ;
		    // messages to stdout are usually IRIS control commands
		    printf("%s mouse button pressed in image with mouse at %d %d\n",bn.c_str(),Fl::event_x(),Fl::event_y()) ;
		}
	    }
	    // no buttons pressed
	    else last_state = 0 ;
	}
	
	// if you exit the main window, stop running the application.
	// since we disabled the escape key and window close button this
	// really shouldn't be possible, but you never know...
	if (!main_window->shown()) running = false ;

	// if you exit the sub-window, turn off the button
	// we have a separate state variable because the callback needs to
	// set its value
	if (!sub_window->shown() && imageState) 
	{
	    imageState = false ;
	    imageButton->value(false) ;
	}
    };

    ////////////////
    // here's your chance to do cleanup
    dtkMsg.add(DTKMSG_INFO, "showCursorPositionInImage: after GUI has exited\n") ;

    return 0 ;
}


