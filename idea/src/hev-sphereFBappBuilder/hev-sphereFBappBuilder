#! /bin/bash

#################################################################
#
# hev-sphereFBappBuilder - Sphere Flip Book App Builder
# 12/5/2016, Steve Satterfield
#
#################################################################
#
# Create an empty directory.
#
# Put  your savg files in the directory.
#
# Savg files should contain:
#
#    POINTS
#    x y z r g b radius
#    x y z r g b radius
#
# Build the visualization:
#
#     See Usage below
#
# Run the visualization:
#      cd runtime
#      ./runapp
#
#################################################################

function usage {

    echo "Usage: hev-sphereFBappBuilder [--xdup] [--ydup] [--zdup] --box l w h pointsfile1 pointsfile2 ..."

    echo "you entered:" $0 $params
    exit
}

params="$*"

if [ $# == 0 ]
then
    usage
fi

# Create runtime and do the work there
d=runtime

if [ -d $d ]
then
    echo "./runtime exists, please delete or rename it."
    exit
fi

mkdir $d
cd $d

xdup=0
ydup=0
zdup=0
boxLength=-1


if [ "$1" == "--xdup" ]
then
     shift
     xdup=1
fi
if [ "$1" == "--ydup" ]
then
    echo "--ydup not yet implemented"
    usage
     shift
     ydup=1
fi
if [ "$1" == "-zdup" ]
then
    echo "--zdup not yet implemented"
    usage
     shift
     zdup=1
fi

if [ "$1" == "--box" ]
then
     shift

     boxLength=$1
     shift

     boxWidth=$1
     shift

     boxHeight=$1
     shift
else
    echo "You must specify --box l w h."
    usage
fi



toOsgb_sh=toOsgb.sh
rm -f ${toOsgb_sh}

# Create the flipbook pages
inum=0
for f in $*
do

    i=$(printf "%06d" $inum )


    if [ "$xdup" == "0" ]
    then
	echo LOAD points${i} ../$f          > points${i}.iris
    else
	echo SCS points${i} 0 0 0 0 0 0 1     >> points${i}.iris
	echo LOAD points0_${i} ../$f     >> points${i}.iris
	echo ADDCHILD points0_${i} points${i}     >> points${i}.iris

	echo SCS points1_${i}  "$boxLength" 0 0  0 0 0 1     >> points${i}.iris
	echo ADDCHILD points0_${i} points1_${i}     >> points${i}.iris

	echo ADDCHILD points1_${i} points${i}     >> points${i}.iris

	echo SCS points2_${i}  "-$boxLength" 0 0  0 0 0 1     >> points${i}.iris
	echo ADDCHILD points0_${i} points2_${i}     >> points${i}.iris
	echo ADDCHILD points2_${i} points${i}     >> points${i}.iris

    fi


    echo LOAD gSphere gpuSphere.iris        >> points${i}.iris
    echo MERGESTATE gSphere points${i}      >> points${i}.iris
    echo UNLOAD gSphere                     >> points${i}.iris

    echo UNIFORM points${i} fatpointSize -1 >> points${i}.iris
    echo CULLING points${i} OFF             >> points${i}.iris

    echo RETURN points${i}                  >> points${i}.iris


    echo "iris-convert points${i}.iris points${i}.osgb" >> ${toOsgb_sh}

    inum=$(echo $inum |awk '{print $1+1;}')
done


hev-runParallel < ${toOsgb_sh}


# Assemble the flipbook and add shaders
hev-animatorIRIS             spheresID points*.osgb > spheres.iris
hev-animatorIRIS -nogeometry spheresID points*.osgb > spheres_nog.iris

# Build bounding wire cube
if [ "$boxLength" == "-1" ]
then
   iris-bounds spheres.iris | hev-boundsToWireCube > bBox.savg
else
   echo $boxLength $boxWidth $boxHeight |\
   awk '{print "box_min:",-1*($1/2), -1*($2/2), -1*($3/2); print "box_max:",+1*($1/2), +1*($2/2), +1*($3/2);}' |\
       hev-boundsToWireCube > bBox.savg
fi

if [ "$xdup" != "0" ]
then
    mv bBox.savg bBox0.savg
    cat bBox0.savg | savg-translate -$boxLength 0 0 >  bBox.savg
    cat bBox0.savg                                  >> bBox.savg
    cat bBox0.savg | savg-translate  $boxLength 0 0 >> bBox.savg
fi
       
# Build structure for gnomon
ax_scal=$(iris-bounds spheres.iris | grep "box_max" | awk '{print $2*2;}')
cat > Axis.iris <<EOF
DCS ax 0 0 0   0 0 0  $ax_scal
LOAD ax0 gnomon.osg
ADDCHILD ax0 ax
RETURN ax
EOF


# Build the demo runapp
hev-moo --sep ":" --xsize 85 spheres.iris bBox.savg gnomon:Axis.iris > moo.iris
hev-animatorMCP spheres_nog.iris > animator.mcp



cat > runapp <<EOF
#! /bin/bash

#if ( hev-testImmersive ) ; then
#    #echo You are running on an immersive machine
#    EXAMINE=""
#else
#    #echo You are running on a desktop machine
#    EXAMINE="--examine"
#fi

irisfly \${EXAMINE} \$* moo.iris animator.mcp lights.mcp

EOF
chmod +x runapp


# Done
