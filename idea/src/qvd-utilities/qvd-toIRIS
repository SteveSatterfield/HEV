#! /usr/bin/perl
#
# qvd-toIRIS  - convert qvisdat file to animated rocks/sphere/shapes using a
#               series of savg files animated as a flip book using 
#               a top level iris file.
#
# steve@nist.gov
#
# Much credit goes to Marc Olano. Parsing of the qvisdat was borrowed
# i.e directly lifted, from hev-qvToNpr
#

#$version="20100303";
#$version="20100910";
#$version="20120507";
$version="20130425";


use Getopt::Long;


####################
# Usage subroutine #
####################


sub usage {

print STDERR <<EOF

Usage: qvd-toIRIS [Options] rockTemplate inFile.qvisdat outFile.iris outDir ID

Version= $version

 Options:

    --gpuSpheres              rocks will be rendered by the GPU, see below.


    --radius radiusList.dat   if specified, provides the name of a file containing radius
                              values for the generated gpuSpheres. Currently, it only
			      works with gpu spheres. The file is a single column of numbers
			      coresponding to the inclusions in the qvisdat file.

    --parallel n              by default use as many CPUs as available to convert savg
                              file pages to osgb format. If specified, use n CPUs.

    --verbose                 lots of mildly interesting spewage.
		    

  Required:

    rockTemplate    is a string which forms a printf-style template for existing
                    polygonal rock shape files. These files must be savg format.
             	    Example -
                    
                       rocks/rock.poly.%02d.savg

                       These template savgfiles can be of two forms:
                         - normal savg files representing the inclusions as polygons
                         - single point representing the inclusions a single point
                           when --gpuSphere is specified.

                       A single point file has a single line in the form:
                               #POINTS r g b a

                       Example -
                               #POINTS  1 1 0 1  
                    


    inFile.qvisdat  is the input file

    outFile.iris    is the output file, must end in .iris

                    When --gpuSpheres specifed, the geometery is a
                    single point suitable to be rendered by a GPU
                    shader which is is added later.

    outDir          is the name of an output directory that will contain the
                    flipbook pages (savg files) for each time step

    ID              is a short unique identifier (no space).
                    Used to ensure the internal names in the output
		    sge file don\'t clash.


EOF
;
exit(1)
}

# End of Usage subroutine



############################
# Subroutine for the rocks #
############################

sub rocksSub {

  $firstFrame=0;

  open(QVISDAT,"<$QVISDAT") || die("Error opening $QVISDAT\n");
  $shape=0;

  while(<QVISDAT>) {
    # number of rocks for indexing
    if (/^ninc\s+(\d+)/) {
	$ROCKS = $1; 
	next;
    }

    # map rock shape to inclusion number
    if (/^shape\s+(\d+)/) {
	$shapeFile[$shape]=sprintf $ROCKFILES, $1;
	#printf (STDERR "shapeFile[$shape] $shapeFile[$shape]\n");

	open(SHAPE, "<$shapeFile[$shape]") || die("Error opening $shapeFile[$shape]\n");
	$shape_i=0;
	while(<SHAPE>) {
	    $shapeData[$shape][$shape_i]=$_;
	    #print STDERR "$shapeData[$shape][$shape_i]";
	    $shape_i++;
	}
	close(SHAPE);
	$shapeCount[$shape]=$shape_i-1;
	$shape++;
	next;
    }

    # update frame counter
    if (/^frame\s+(\d+)/) {
	$frame=$1;

	$outpage=sprintf("%s/%s_page_%05d.savg", $OUTDIR,$ID,$frame);
	printf (STDERR "Output page: $outpage\n") if ($verbose==1);
	unlink $outpage if -f $outpage;

	if ($firstFrame  > 0) {
	    close(PAGE);
	}
	if ($gpuSpheres == 0) {
	    open(PAGE, "| hev-savgTransformation >$outpage") || die("Error opening pipe to $outpage\n");
	} else {
	    open(PAGE, ">$outpage") || die("Error opening pipe to $outpage\n");
	    printf(PAGE "POINTS\n");
	}
	$firstFrame++;
	next;
    }

    # recognize an inclusion
    if (/^inclusion		# identify line
	\s+(\d+)		# $1 = inclusion ID
	\s+(\d+)		# $2 = number of closest points
	\s+(\S+)\s+(\S+)\s+(\S+)# ($3,$4,$5) = center of mass
	\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+) # ($6,$7,$8,$9) = xyzw quaternion
	\s+(\S+)\s+(\S+)\s+(\S+)# ($10,$11,$12) = velocity
	\s+(\S+)\s+(\S+)\s+(\S+)# ($13,$14,$15) = angular velocity
	/x)			# allow spaces & comments in regexp
    {

	$rockA=$1-1;		# rock A index, zero-based

	if ($gpuSpheres == 0) {
            # Note: this works because the hev-savgTransformation command will read
            #       the its own command syntax to modify its behavior
	    printf(PAGE "hev-savgTransformation --quat $6 $7 $8 $9 --xyz $3 $4 $5\n");

            # Feed each rock to the transformation pipe
	    for ($irock=0; $irock<=$shapeCount[$rockA]; $irock++) {
		print PAGE $shapeData[$rockA][$irock];
	    }
	} else {
	    @c=split(' ', $shapeData[$rockA][0],-1);
	    if ($radiusList eq "") {
		printf(PAGE "$3 $4 $5 $c[1] $c[2] $c[3] $c[4]\n");
	    } else {
		printf(PAGE "$3 $4 $5 $c[1] $c[2] $c[3] $radius[$rockA]\n");
	    }
	}


	next;
    }

  }

  close(QVISDAT);
}

# End of rocksSub




####################
# Main Begins here #
####################

if ($ENV{"HEVROOT"} eq "") {
    print STDERR "HEVROOT is not defined\n";
    exit(1);
}


############################
# Process the command line #
############################

# Default values
$verbose=0;
$debug=0;
$parallelN=0;
$gpuSpheres=0;
$radiusList="";

#print "\@ARGV= @ARGV\n";

GetOptions("debug"               => \$debug,
           "verbose"             => \$verbose,
           "gpuSpheres"          => \$gpuSpheres,
           "radius:s"            => \$radiusList,
           "parallel:i"          => \$parallelN
);


usage() if (@ARGV != 5);

# Get mandatory in and out file arguments
$ROCKFILES= shift;
$QVISDAT = shift;
$OUTFILE = shift;
$OUTDIR = shift;
$ID = shift;


#$debug=0;    # set to 1 to print values
# --debug is a hidden option that will set this
if ($debug) {
    print STDERR "version= $version\n";
    print STDERR "parallelN= $parallelN\n";
    print STDERR "gpuSpheres= $gpuSpheres\n";
    print STDERR "radiusList= $radiusList\n";

    print STDERR "ROCKFILES= $ROCKFILES\n";
    print STDERR "QVISDAT= $QVISDAT\n";
    print STDERR "OUTFILE= $OUTFILE\n";
    print STDERR "$OUTDIR = $OUTDIR\n";
    print STDERR "ID= $ID \n";
    exit(1);
}


# Read radiusFile if specified

if ($radiusList ne "") {
    if ($gpuSpheres == 0) {
	print STDERR "Specifying --radius requires --gpuSpheres.\n";
	exit(1);
    }

    open(RADIUS, "<$radiusList") || die("Error opening $radiusList\n");

    $i=0;
    while (<RADIUS>) {
	$radius[$i]=$_;
	$i++;
    }

    close(RADIUS);
}





#######################################
# Output flipbook pages as savg files #
#######################################


print STDERR "Parsing qvisdat file to output rocks in flipbook pages\n" if ($verbose==1);

rocksSub();

print STDERR "Parsing qvisdat done\n" if ($verbose==1);




###########################################################
# Convert and optimize the savg file pages to osgb format #
###########################################################

print STDERR "savg files to osgb\n" if ($verbose==1);

$tmp=$ENV{"OSG_OPTIMIZE"};
if ($tmp eq "") {
    $osgOptimize="MERGE_GEOMETRY:VERTEX_POSTTRANSFORM"
} else {
    $osgOptimize=$tmp;
}

print STDERR "Optimizing with $osgOptimize\n" if ($verbose==1);

if ($verbose == 1) {
    $VERBOSE="--verbose";
} else {
    $VERBOSE="";
}

$cmd="cd $OUTDIR; ls -1 *.savg | sed 's/.savg//' | awk '{printf \"iris-convert --optimize $osgOptimize %s.savg %s.osgb\\n\",\$1,\$1;}' | hev-runParallel $VERBOSE --parallel $parallelN";
#print STDERR "$cmd\n";

system($cmd);

print STDERR "osgb files created\n" if ($verbose==1);


#############################################################
# Combine the osgb pages into an iris for animation control #
#############################################################

print STDERR "Create iris files\n" if ($verbose==1);

$cmd=sprintf("hev-animatorIRIS %s %s/*.osgb > %s",$ID, $OUTDIR, $OUTFILE);
#printf STDERR "$cmd\n";
system($cmd);

$cmd=sprintf("hev-animatorIRIS -nogeometry %s %s/*.osgb > nogeometry_%s",$ID, $OUTDIR, $OUTFILE);
#printf STDERR "$cmd\n";
system($cmd);


############################################################
# All done
############################################################

print STDERR "qvd-toIRISrocks all done\n" if ($verbose==1);
