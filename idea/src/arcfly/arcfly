#!/bin/bash

########################################################################
usage() {
    cat<<EOF
Usage: arcfly -v -s -W -M [ --"options" ] file ... 
EOF

}

########################################################################
# quick way to get a usage command, although it keeps you from running
# iris-viewer with no files

if [ $# -eq 0 ]
then usage
    exit 0
fi

########################################################################
# if $1 has a value, append :$2, otherwise just set $1 to $2
setOrAppend() {
    a=`eval echo '$'$1`
    if [ "$a" = "" ] ; then
	eval $1="$2"
    else
	eval $1="\$$1":\""$2"\"
    fi
}

########################################################################
# if $1 has a value, prepend $2:, otherwise just set $1 to $2
setOrPrepend() {
    a=`eval echo '$'$1`
    if [ "$a" = "" ] ; then
	eval $1="$2"
    else
	eval $1=\""$2"\":"\$$1"
    fi
}

########################################################################
doit() {
    first=`echo $* | sed -e 's/ .*$//'`

    if [ "$first" = "source" -o "$first" = "." ] ; then
	$*
    else
	sh -c "$*"
    fi

}

########################################################################


##############
#            #
#    Main    #
#            #
##############

echo "********** arcfly started"

# H is actual host name
# ARC_HOSTNANE is the Arc system host name or the hostname
#     pretending to be the Arc (typicaly for debugging else where).
#     If ARC_HOSTNAME is in the environment, use it.
#     If not, then hard code it here .
#
H=$(hostname -s)
#echo "ARC_HOSTNAME:"  ${ARC_HOSTNAME}

if [ -z ${ARC_HOSTNAME} ]
then
    export ARC_HOSTNAME="ncatpc2"
else
    dtk-msgWarning arctfly: Pretending $ARC_HOSTNAME is the Arc system
fi



# This a terrible work around to a problem that deep in some
# corner of the software, DISPLAY must be set :0.0
# becuase :0 doesn't work correctly. I really should fix the
# actual problem.

echo "********** DISPLAY:" $DISPLAY

case $DISPLAY in
    :0|:0.)
	export DISPLAY=:0.0
	;;
    :1|:1.|:1.0)
	export DISPLAY=:1.0
	;;
    *)
	echo   "Oops, I really should handle more cases, complain to steve@nist.gov"
	exit
esac;

echo "********** DISPLAY:" $DISPLAY


# Set default FSAA mode. List modes: nvidia-settings --query=fsaa --verbose
echo "********** set __GL_FSAA_MODE to either: 11 for GeForce or 14 for Quadro"
if [ -z "$__GL_FSAA_MODE" ]
then
    hev-glinfo | grep GeForce > /dev/null
    if [ "$?" == "0" ]
    then
	export __GL_FSAA_MODE=11   # GeForce series
    else
	export __GL_FSAA_MODE=14   # Quadro series
    fi
fi
echo "********** __GL_FSAA_MODE:" $__GL_FSAA_MODE

# where to find the files
dataDir=$HEV_IDEA_DIR/etc/arcfly/data
echo "********** dataDir:" $dataDir

# arcfly only adds OSG loadable files, it doesn't add any of its own DSOs
setOrAppend OSG_FILE_PATH "${dataDir}"
export OSG_FILE_PATH
echo "********** OSG_FILE_PATH:" $OSG_FILE_PATH

setOrAppend MCP_FILE_PATH "${dataDir}"
export MCP_FILE_PATH
echo "********** MCP_FILE_PATH:" $MC_FILE_PATH

# set an envvar for the default interocular distance if not already
# set. This is used by common.iris and interocular.sh
[ -z "$IRISFLY_INTEROCULAR_DISTANCE" ] && export IRISFLY_INTEROCULAR_DISTANCE=".1"

# these load the displays

defaultDesktopDisplay="desktopDisplay.iris"       # $IRISFLY_DESKTOP_DISPLAY will override

defaultRaveDisplay="raveDisplay.iris"   # $IRISFLY_IMMERSIVE_DISPLAY will override

defaultSimulatorDisplay="simulatorDisplay.iris"   # $IRISFLY_SIMULATOR_DISPLAY will override
                                                  # make the rave the default simulator,
                                                  # since we can't automatically choose

                                                  # What does this mean -sgs

# these load DSO and run programs


defaultCommon="common.iris"                       # $IRISFLY_COMMON will override

defaultDesktop="desktop.iris"                     # $IRISFLY_DESKTOP will override

defaultImmersive="immersive.iris"                 # $IRISFLY_IMMERSIVE will override

defaultSimulator="simulator.iris"                 # $IRISFLY_SIMULATOR will override

defaultWandMouse="wandMouse.iris"                 # $IRISFLY_WANDMOUSE will override

defaultMono="mono.iris"                           # $IRISFLY_MONO will override


# these set up the MCP menus

defaultCommonMCP="common.mcp"                     # $IRISFLY_COMMON_MCP will override

defaultDesktopMCP="desktop.mcp"                   # $IRISFLY_DESKTOP_MCP will override

defaultImmersiveMCP="immersive.mcp"               # $IRISFLY_IMMERSIVE_MCP will override

defaultSimulatorMCP="simulator.mcp"               # $IRISFLY_SIMULATOR_MCP will override


# If really running on Arc, then we're "immersive", "everybody" else is desktop
if ( [ "$H" == "$ARC_HOSTNAME" ] )
   then env="immersive"
   else env="desktop"
fi

# parse arguments
while [ -n "$*" ]
do
    if [ "$1" == "-v" ]
    then export DTK_SPEW_LEVEL=info
    elif [ "$1" == "-s" ]
    then env=simulator
    elif [ "$1" == "-W" ]
    then noWandMouse=1
    elif [ "$1" == "-M" ]
    then mono=1
    elif [ "$1" == "-l" ]
    then log=1
    elif [ "$1" == "-t" ]
    then trackerMonitor=1
    elif [ "$1" != "${1#--}" ]
    then viewerStuff="$*"
	break
    elif [ "$1" != "${1#-}" ]
    then usage
	exit 0 
    else
	viewerStuff="$*"
	break
    fi
    shift
done


# At this point env is "desktop", "immersive" or "simulator".
#
# By definition, desktop is "mono" (no stereo), typically laptop or desktop.
#                immersvie is "stereo" and head tracking on Arc
#                simulator is "desktop" with the added simulator capabilities added
#

echo "********** At this point env is desktop, immersive or simulator."
echo "********** env" $env
dtk-msgInfo arcfly: $env: environment

export IRIS_DISPLAY_NAME=$DISPLAY   #set IRIS_DISPLAY_NAME so desktopDisplay will be in the right place
echo "**********  IRIS_DISPLAY_NAME:" $IRIS_DISPLAY_NAME "DISPLAY:" $DISPLAY


if [ "$env" == "immersive" ]
then if [ -z "$IRISFLY_MCP_X11_IMMERSIVE_OPTIONS" ]
     then IRISFLY_MCP_X11_IMMERSIVE_OPTIONS='-geometry +470+0'
	  export IRISFLY_MCP_X11_IMMERSIVE_OPTIONS
     fi
else unset IRISFLY_MCP_X11_IMMERSIVE_OPTIONS
fi

echo "********** IRISFLY_MCP_X11_IMMERSIVE_OPTIONS:" $IRISFLY_MCP_X11_IMMERSIVE_OPTIONS
echo '********** env: ' $env


######################################################
#                                                    #
# Load iris files so that irisfly does what you want #
#     First the display iris files                   #
#     Second the action (what it does) iris files    #
#                                                    #
######################################################

# at this point:
#
#    env=simulator  means run simlator in desktop mode where ever you are
#
#    env=desktop    means you are not on Arc so run as desktop
#
#    env=immersive  means you are on the Arc so run in immersive mode

#
# First: load display files
#

echo "********** seting up irisfly_files (current contents should be empty):" $irisfly_files

case $env in
    simulator)
	irisfly_files=${IRISFLY_DESKTOP_DISPLAY:-$defaultDesktopDisplay}
	irisfly_files="$irisfly_files ${IRISFLY_SIMULATOR_DISPLAY:-$defaultSimulatorDisplay}"
	;;
    immersive)
	irisfly_files=${IRISFLY_DESKTOP_DISPLAY:-$defaultDesktopDisplay}
	irisfly_files="$irisfly_files ${IRISFLY_IMMERSIVE_DISPLAY:-$defaultRaveDisplay}"
	;;
    desktop)
	irisfly_files=${IRISFLY_DESKTOP_DISPLAY:-$defaultDesktopDisplay}
	;;
    *)
	dtk-msgError arcfly: env is set to $env, this shouldn\'t happen, email what you did to get this mesage to steve@nist.gov
	;;

esac



#
# Second: load action files
#

# for debugging
irisfly_files="$irisfly_files NULL"


echo "********** irisfly_files:" $irisfly_files

irisfly_files="$irisfly_files ${IRISFLY_COMMON:-$defaultCommon}"
echo "********** add common files, irisfly_files:" $irisfly_files


echo "********** env:" $env
case $env in
    simulator)
	irisfly_files="$irisfly_files ${IRISFLY_SIMULATOR:-$defaultSimulator}"
	;;
    immersive)
	irisfly_files="$irisfly_files ${IRISFLY_IMMERSIVE:-$defaultImmersive}"
	;;
    desktop)
	irisfly_files="$irisfly_files ${IRISFLY_DESKTOP:-$defaultDesktop}"
	;;
    *)
	dtk-msgError arkfly: env is set to $env, this shouldn\'t happen, email what you did to get this mesage to steve@nist.gov, proceeding as desktop.
	irisfly_files="$irisfly_files ${IRISFLY_DESKTOP:-$defaultDesktop}"
	;;

esac


echo  "**********" tracker monitoring section
# for tracker monitoring
if [ -n "$trackerMonitor" ]
then
    irisfly_files="$irisfly_files trackerMonitor.iris"
fi


echo "********** wandmouse"
if [ "$env" == "immersive" -a -z "$noWandMouse" ]
then 
    irisfly_files="$irisfly_files ${IRISFLY_WANDMOUSE:-$defaultWandMouse}"
    export IRISFLY_WANDMOUSE_DISPLAY=$DISPLAY
    echo "********* IRISFLY_WANDMOUSE_DISPLAY:" $IRISFLY_WANDMOUSE_DISPLAY
    export IRISFLY_WANDMOUSE_WINDOW="hdFrontWindow"
fi

# this is the window where we save the pointer
export IRIS_SAVE_RESTORE_POINTER="$DISPLAY"

# make windows mono if requested
if [ -n "$mono" ]
then irisfly_files="$irisfly_files ${IRISFLY_MONO:-$defaultMono}"
fi

dtk-msgInfo  arcfly: $irisfly_files   files: $irisfly_files

# load MCP files
echo "*********" load MCP files
IRISFLY_MCP_FILES=${IRISFLY_COMMON_MCP:-$defaultCommonMCP}

[ -n "$IRISFLY_LAST_MCP" ] && IRISFLY_MCP_FILES="$IRISFLY_MCP_FILES $IRISFLY_LAST_MCP"

# this ennvar is either the name of the mcp file that allows interocular to
# be changed or is /dev/null so no button gets created. Yeah, it's a hack
if [ "$env" == "immersive" -a -z "$mono" ]
then export IRISFLY_INTEROCULAR_MCP_FILE=interocular.mcp
else export IRISFLY_INTEROCULAR_MCP_FILE=/dev/null
fi
echo "********* IRISFLY_INTEROCULAR_MCP_FILE: " $IRISFLY_INTEROCULAR_MCP_FILE

if [ -z "$IRISFLY_DISPLAY_MCP" ]
then if [ "$env" == "desktop" ] 
    then export IRISFLY_DISPLAY_MCP=${IRISFLY_DESKTOP_MCP:-$defaultDesktopMCP}
    elif [ "$env" == "simulator" ]
    then export IRISFLY_DISPLAY_MCP=${IRISFLY_SIMULATOR_MCP:-$defaultSimulatorMCP}
    elif [ "$env" == "immersive" ]
    then export IRISFLY_DISPLAY_MCP=${IRISFLY_IMMERSIVE_MCP:-$defaultImmersiveMCP}
    else dtk-msgError irisfly: unknown value of \$env- email what you did to get this mesage to kelso@nist.gov
    fi
fi
echo "********* IRISFLY_DISPLAY_MCP: " $IRISFLY_DISPLAY_MCP

# turn on logging button if requested
[ -n "$log" ] && IRISFLY_MCP_FILES="$IRISFLY_MCP_FILES log.mcp"

# and tell MCP what they are
export IRISFLY_MCP_FILES
echo "**********  IRISFLY_MCP_FILES:" $IRISFLY_MCP_FILES

# this is the window MCP uses
if [ "$env" == "immersive" ]
then export IRISFLY_MCP_DISPLAY=$IRISFLY_WANDMOUSE_DISPLAY
else export IRISFLY_MCP_DISPLAY=$DISPLAY
fi
echo "********** IRISFLY_MCP_DISPLAY:" $IRISFLY_MCP_DISPLAY

# this is the fifo that mcp will read from
if [ -z "$IRISFLY_MCP_CONTROL_FIFO" ]
then IRISFLY_MCP_CONTROL_FIFO=/tmp/irisfly-mcp-fifo-${USER}
fi

export IRISFLY_MCP_CONTROL_FIFO

# always start with a minty fresh fifo
if [ -e $IRISFLY_MCP_CONTROL_FIFO ]
then if [ ! -p $IRISFLY_MCP_CONTROL_FIFO ]
     then dtk-msgError irisfly: $IRISFLY_MCP_CONTROL_FIFO fifo exists but is not a fifo. exiting
          exit 0
     fi
     rm $IRISFLY_MCP_CONTROL_FIFO
     if [ -e $IRISFLY_MCP_CONTROL_FIFO ]
     then dtk-msgError irisfly: $IRISFLY_MCP_CONTROL_FIFO fifo exists and can\'t be removed. exiting
          exit 0
     fi
fi

# this allows commands to be fed to the pipe befre MCP is running
dtk-msgInfo irisfly: creating iris control fifo $IRISFLY_MCP_CONTROL_FIFO 
mkfifo $IRISFLY_MCP_CONTROL_FIFO

# this is the file that contains a list of windows to hide/show
if [ -z "$IRISFLY_HIDE_SHOW_WINDOWS" ]
then IRISFLY_HIDE_SHOW_WINDOWS=/tmp/irisfly-hideShowWindows-${USER}
fi
export IRISFLY_HIDE_SHOW_WINDOWS

# create and/or zero out the window list file
cat /dev/null> $IRISFLY_HIDE_SHOW_WINDOWS

# do this when you exit
if [ -n "$IRISFLY_EXIT_COMMANDS" ]
then trap "doit $IRISFLY_EXIT_COMMANDS" EXIT
fi
# I know this is ugly -sgs
#if [ -n "$IRISFLY_EXIT_COMMANDS" ]
#then trap "pkill -9 iris-wandMouse; doit $IRISFLY_EXIT_COMMANDS" EXIT
#else trap "pkill -9 iris-wandMouse" EXIT
#fi


# do pre iris-viewer commands
if [ -n "$IRISFLY_PRE_VIEWER_COMMANDS" ]
then doit $IRISFLY_PRE_VIEWER_COMMANDS
fi

# to find our private bin
export PATH="$HEV_IDEA_DIR/etc/irisfly/bin:$PATH"

# display is set so new GUIs will appear on the correct screen
command="env DISPLAY=$IRISFLY_MCP_DISPLAY iris-viewer $irisfly_files $viewerStuff"

echo "********* DISPLAY:" $DISPLAY
echo "********* irisfly_files:" $irisfly_files
echo "********* viewerStuff: " $viewerStuff
echo

dtk-msgInfo irisfly: $command
echo
echo "********* RUN THIS COMMAND: " $command
echo
$command

echo
echo "********* BACK FROM THAT COMMAND"


#echo "Modified:"
#DISPLAY=":1.0"
#irisfly_files=" desktopDisplay.iris powerwallDisplay.iris common.iris wandMouse.iris"
#echo "DISPLAY:" $DISPLAY
#echo "irisfly_files:" $irisfly_files
#echo "viewerStuff: " $viewerStuff
#command="env DISPLAY=$IRISFLY_MCP_DISPLAY iris-viewer $irisfly_files $viewerStuff"
#echo $comand: $command
#$command


# do post iris-viewer commands
if [ -n "$IRISFLY_POST_VIEWER_COMMANDS" ]
then doit $IRISFLY_POST_VIEWER_COMMANDS
fi

# get rid of the window list file
rm -f $IRISFLY_HIDE_SHOW_WINDOWS
