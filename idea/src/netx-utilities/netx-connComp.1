.TH NETX-CONNCOMP 1 "15 June 2012"

.SH NAME

netx-connComp


.SH SYNOPSIS

.B netx-connComp
.I  inputFile
.SH GRAPH LIMITATIONS
\fBDirected:\fR No
.br
\fBUndirected:\fR Yes
.br
\fBSelf-Loops:\fR Yes
.br
\fBParallel Edges:\fR Yes
.br
\fBOther:\fR None
.br .br
.PP


.SH DESCRIPTION

\fBnetx-connComp\fR calculates the size of all the connected components of the graph. The function creates two files, one called \fBconnComp.output1.txt\fR and the other \fBconnComp.output2.txt\fR in the current working directory. \fBconnComp.output1.txt\fR contains the size of the connected component and the number of connected components of that size in the graph, as long as there is at least one connected component of that size. \fBconnComp.output2.txt\fR contains a unique id for each connected component and then lists the nodes that make up that connected component. An example of each file is given below.
.br .P
.br .P
.PP
\fBconnComp.output1.txt\fR Example Output:					
.br .P
Comp_Size	Num_of_Comps				
.br		
2		46								
.br
3		50								
.br
5		68								
.br
10		22								
.br
11		80								
.br .P
Where Comp_Size is the size of the component and Num_of_Comps is the number of connected components of that size.
.br .P
.br .P
.PP
\fBconnComp.output2.txt\fR Example Output:
.br .P
.br .P
.PP
Connected Components' Nodes
.br .P
10.0 - node1, node2, node3, node4, node5, node6, node7, node8, node9, node10
.br .P
.br .P
.PP
6.1 - node11, node12, node13, node14, node15, node16
.br .P
.br .P
.PP
6.2 - node17, node18, node 19, node20, node 21, node22
.br .P
.br .P
.PP
4.3 - node23, node24, node 25, node26
.br .P
.br .P
.PP
2.4 - node27, node28
.br .P
.br .P
.PP
Note that the connected components size is in descending order. Also note that the number before the decimal point indicates the size of the connected component, while the number after the decimal point provides a unique identifier.
.br .P
.br .P
.PP
\fBinputFile\fR is a file in edge-list format that contains only text. It does not have any header information. The nodes can have any name, as long as each node has a unique name (i.e. you can't have two nodes both named "sam" in the same graph). Optionally, after listing the two nodes, a weight to be assigned to that edge. The weight does not affect the calculations of the connected components, but is included to allow for a greater breadth of input files. The weight must be a positive number. Two examples of input files are given below. The first does not have edge-weight. The second does.
.br .P
.PP
Example One:
.br .P
node1 node2 
.br .P
node3 node1
.br .P
node4 node5
.br .P
.br .P
.PP
Where there is an edge between the two nodes on the same line.
.br .P
.br .P
.PP
Example Two:
.br .P
node1 node2 4
.br .P
node3 node1 3.14
.br .P
node4 node5 2
.br .P
.br .P
.PP
Where there is an edge between the first two entries(nodes) on the same line and the third number is the weight of that edge.

.SH AUTHOR

Zachary Keller

.PP
June 2012

.PP 
High Performance Computing & Visualization Group
.br
NIST
.br
.B www.nist.gov/mcsd/hpcvg/
