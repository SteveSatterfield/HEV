.TH MHA 5 "11 April 2008"


.SH NAME

mha - Meta I/O image format


.SH DESCRIPTION

\fBmha\fR is a two-file format for storing image and volume data. The
first file, with an extension of \fB.mha\fR or \fB.mhd\fR, is an ASCII
header describing the image data. This file includes a reference to a
second file consisting of uncompressed binary data. For more
information, refer to the ITK toolkit.

The OpenSceneGraph MHA reader supports 1D, 2D or 3D textures with 1,
2, 3, or 4 components per pixel. The data for each component can be
unsigned byte, unsigned short, or single precision float.

The binary data is in channel/X/Y/Z order. For example, in an RGB
image, the first element of the file is the red component of the first
pixel, the next element is the green component of that pixel, then the
blue component. These will be followed by the R, G, and B components
of the next pixel in the X direction, followed by the third pixel in
the X direction through the end of the first line. The first line is
followed by the next line in the Y direction, and so on through the
end of the image.

The ASCII file consists of a series of tags, one per line, in
\fItag=value\fR format. For tags with multiple numbers, the numbers
are separated by spaces. Extra white space or unknown header tags
should be ignored.

.SS "Supported tags"

The following tags are read by the OSG mha/mhd reader:

.IP "\fBComment = \fI<comment>\fR"
Any one-line comment to be ignored

.IP "\fBObjectType = Image\fR"
The Meta I/O format also supports geometric objects and other data
besides images. The OSG mha reader only supports Image files.

.IP "\fBNDims = \fI<1-3>\fR"
Indicates 1D, 2D or 3D texture. Values larger than three are not
supported by the OSG reader.

.IP "\fBDimSize = \fI<int>\fB \fI...\fR"
Size of each texture dimension in x y z order. The number of integers
should match the number of dimensions from the \fINDims\fR line.

.IP "\fBElementNumberOfChannels = \fI<1-4>\fR"
Number of channels in each texel. In OpenGL terms, 1 is an
luminance texture, 2 is luminance/alpha, 3 is RGB, 4 is RGBA. Values
larger than four are not supported by the OSG reader.

.IP "\fBHeaderSize = \fI<int>\fR"
Number of header bytes at the beginning of the data file
-1 = compute size and start that far from the end of the
file. -1 is particularly useful for reading files in other
simple brick-of-bytes formats, since you can create an mha file
describing the contents, then skip the native header. Using this
approach, it is possible to use this loader for ppm or pfm files.

.IP "\fBBinaryDataByteOrderMSB = \fI(True|False)\fR"
.ns
.IP "\fBElementByteOrderMSB = \fI(True|False)\fR"
Either of these indicate the endianness of the data. Intel
processor native byte order is little endian (or \fIFalse\fR)

.IP "\fBElementType = \fI(MET_UCHAR|MET_USHORT|MET_FLOAT)\fR"
Element data type. 

These additional types are legal for the Meta I/O format, but not
handled by the OSG reader: \fIMET_CHAR\fR, \fIMET_SHORT\fR,
\fIMET_INT\fR, \fIMET_UINT\fR, \fIMET_LONG\fR, \fIMET_ULONG\fR,
\fIMET_LONG_LONG\fR, \fIMET_ULONG_LONG\fR, \fIMET_DOUBLE\fR.

.IP "\fBElementDataFile = \fI(<file>|LOCAL)\fR"
File for binary data, relative to the directory containing the
\fImha\fR file. \fILOCAL\fR means that the binary data starts on the
*next* line of the \fI.mha\fR file. Must be the last header line to
appear.

In addition, the mha format allows two additional options not
supported bythe OSG reader. The first is a \fIprintf\fR-style format
string followed by min, max and step values to load a series of
(NDims-1) dimensional image files. The second is the keyword
\fILIST\fR followed by a list of files (NDims-1) dimensional image
files, one per line.

.SS "Unsupported Tags"

The following tags describe additional options for data storage

.IP "\fBBinaryData = \fI(Binary|ASCII)\fR"
If \fIASCII\fR, data is white-space separated text numbers. The OSG reader
only supports \fIBinary\fR.

.IP "\fBElementMin = \fI<float>\fR"
.ns
.IP "\fBElementMax = \fI<float>\fR"
Minimum and maximum value in the data

.IP "\fBCompressedData = \fI(True|False)\fR"
.ns
.IP "\fBCompressedDataSize = \fI<int>\fR"
This supports data files in a compressed format (JPEG, GIF, PNG or
TIFF), where the file size is potentially different from the ultimate
uncompressed data size.

.HP
The following tags relate volumes to some medical meaning
 
.IP "\fBAnatomicalOrientation = \fI<XYZ>\fR"
Orientation of each of the three axes for 3D volume medical
data. Should be three characters chosen from R or L (for axis pointing
right or left), A or P (for anterior or posterior), and S or I (for
superior or inferior). Only one of each pair of letters should
appear. For example, \fIRAS\fR would indicate a right-handed
coordinate system with X pointing toward the patient's right, Y
pointing toward the patient's front, and Z pointing toward the
patient's head.

.IP "\fBModality = \fI(MET_MOD_CT|MET_MOD_MR|MET_MOD_NM|MET_MOD_US)\fR"
Where the data came from, CT scan, NMR, MRI, Ultrasound, etc.

.IP "\fBSequenceID = \fI<int>\fB \fI<int>\fB \fI<int>\fB \fI<int>\fR"
DICOM Patient, Study, Series and Image numbers

.IP "\fBName = \fI<string>\fR"
.ns
.IP "\fBID = \fI<int>\fR"
.ns
.IP "\fBParentID = \fI<int>\fR"
Additional user defined information

.HP
The following relate the image or volume to some physical location,
orientation, or size.

.IP "\fBPosition = \fI<float>\fB \fI<float>\fB \fI<float>\fR"
World-space position of the origin of the image or volume.

.IP "\fBOrientation = \fI<float>\fB \fI...\fR"
.ns
.IP "\fBTransformationMatrix = \fI<float>\fB \fI...\fR"
\fINDims\fR x \fINDims\fR matrix giving orientation of image or volume
in world space. The first \fINDims\fR floats give the world-space
direction of the image/volume X axis, the next \fINDims\fR floats give
the world-space orientation of the Y axis, etc.

.IP "\fBElementSize = \fI<float>\fB \fI...\fR"
.ns
.IP "\fBElementSpacing = \fI<float>\fB \fI...\fR"
Physical size (or spacing between) each voxel

.SH "EXAMPLES"

This is simple example of an 256 x 256 x 256 8-bit volume
.PP
   ObjectType = Image
   NDims = 3
   DimSize = 256 256 256
   ElementType = MET_UCHAR
   ElementDataFile = Engine256.raw
.P

This is an MHA header for a PPM 8-bit RGB image file. Notice the use
of -1 for the header size to skip the PPM header in image.ppm.
.PP
   ObjectType = Image
   NDims = 2
   DimSize = 2 2
   ElementNumberOfChannels = 3
   HeaderSize = -1
   ElementType = MET_UCHAR
   ElementDataFile = image.ppm
.P

This is an MHA header for a PFM-format floating-point high dynamic
range image.
.PP
   ObjectType = Image
   NDims = 2
   DimSize = 128 128
   ElementNumberOfChannels = 3
   HeaderSize = -1
   ElementType = MET_FLOAT
   ElementByteOrderMSB = true
   ElementDataFile = beach_probe.pfm
.P



.SH "SEE ALSO"

\fBppm\fR(5), \fBprintf\fR(3)

.SH AUTHOR

Marc Olano

.PP
April 2008

.PP 
High Performance Computing & Visualization Group
.br
NIST
.br
.B www.nist.gov/mcsd/hpcvg/
